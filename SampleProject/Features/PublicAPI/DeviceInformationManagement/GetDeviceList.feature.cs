// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Soti.MobiControl.Bdd.PublicApiTests.Features.PublicAPI.DeviceInformationManagement
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("GetDeviceList")]
    [NUnit.Framework.CategoryAttribute("CleanDevices")]
    public partial class GetDeviceListFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GetDeviceList.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "GetDeviceList", "", ProgrammingLanguage.CSharp, new string[] {
                        "CleanDevices"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line 5
 testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
 testRunner.And("Execute once per feature STARTED", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "GroupPath"});
            table1.AddRow(new string[] {
                        "autogenerate \\\\devGroup1.{guid}"});
            table1.AddRow(new string[] {
                        "autogenerate \\\\devGroup2.{guid}"});
#line 7
 testRunner.And("I have added device groups as follows:", ((string)(null)), table1, "And ");
#line 12
 testRunner.And("I have enabled LDAP integration for LDAP connection \'{sotiqa}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "PrincipalType",
                        "Name",
                        "DisplayName",
                        "DomainName",
                        "LdapConnectionName",
                        "MemberOf"});
            table2.AddRow(new string[] {
                        "ActiveDirectoryUser",
                        "SSPUser",
                        "SSP1",
                        "SOTIQA",
                        "{sotiqa}",
                        "MobiControl Administrators"});
#line 13
 testRunner.And("I have created principals as follows:", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceName",
                        "RuleName",
                        "LdapConnection",
                        "LdapUserName",
                        "LdapUserPassword",
                        "TargetGroup",
                        "DeviceId"});
            table3.AddRow(new string[] {
                        "autogenerate IosSimulator01.{guid}",
                        "autogenerate Rule1{guid}",
                        "{sotiqa}",
                        "SSPUser",
                        "Welcome1234",
                        "\\\\devGroup1.{guid}",
                        "autogenerate deviceId01.{guid}"});
            table3.AddRow(new string[] {
                        "autogenerate IosSimulator02.{guid}",
                        "Rule1{guid}",
                        "{sotiqa}",
                        "SSPUser",
                        "Welcome1234",
                        "\\\\devGroup1.{guid}",
                        "autogenerate deviceId02.{guid}"});
            table3.AddRow(new string[] {
                        "autogenerate IosSimulator03.{guid}",
                        "Rule1{guid}",
                        "{sotiqa}",
                        "SSPUser",
                        "Welcome1234",
                        "\\\\devGroup1.{guid}",
                        "autogenerate deviceId03.{guid}"});
            table3.AddRow(new string[] {
                        "autogenerate IosSimulator04.{guid}",
                        "Rule1{guid}",
                        "{sotiqa}",
                        "SSPUser",
                        "Welcome1234",
                        "\\\\devGroup1.{guid}",
                        "autogenerate deviceId04.{guid}"});
            table3.AddRow(new string[] {
                        "autogenerate IosSimulator05.{guid}",
                        "Rule1{guid}",
                        "{sotiqa}",
                        "SSPUser",
                        "Welcome1234",
                        "\\\\devGroup1.{guid}",
                        "autogenerate deviceId05.{guid}"});
            table3.AddRow(new string[] {
                        "autogenerate IosSimulator06.{guid}",
                        "autogenerate Rule2{guid}",
                        "{soti.net}",
                        "testuser2",
                        "Bonjour321",
                        "\\\\devGroup2.{guid}",
                        "autogenerate deviceId06.{guid}"});
            table3.AddRow(new string[] {
                        "autogenerate IosSimulator07.{guid}",
                        "Rule2{guid}",
                        "{soti.net}",
                        "testuser2",
                        "Bonjour321",
                        "\\\\devGroup2.{guid}",
                        "autogenerate deviceId07.{guid}"});
            table3.AddRow(new string[] {
                        "autogenerate IosSimulator08.{guid}",
                        "Rule2{guid}",
                        "{soti.net}",
                        "testuser2",
                        "Bonjour321",
                        "\\\\devGroup2.{guid}",
                        "autogenerate deviceId08.{guid}"});
            table3.AddRow(new string[] {
                        "autogenerate IosSimulator09.{guid}",
                        "Rule2{guid}",
                        "{soti.net}",
                        "testuser2",
                        "Bonjour321",
                        "\\\\devGroup2.{guid}",
                        "autogenerate deviceId09.{guid}"});
            table3.AddRow(new string[] {
                        "autogenerate IosSimulator10.{guid}",
                        "Rule2{guid}",
                        "{soti.net}",
                        "testuser2",
                        "Bonjour321",
                        "\\\\devGroup2.{guid}",
                        "autogenerate deviceId10.{guid}"});
#line 16
 testRunner.And("I have enrolled Ios Devices with properties as follows (execute once):", ((string)(null)), table3, "And ");
#line 28
  testRunner.And("Execute once per feature ENDED", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calling WC version for device group - get all devices from this group")]
        [NUnit.Framework.CategoryAttribute("CarryOverScenarioContext")]
        public virtual void CallingWCVersionForDeviceGroup_GetAllDevicesFromThisGroup()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calling WC version for device group - get all devices from this group", new string[] {
                        "CarryOverScenarioContext"});
#line 31
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 32
 testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Path",
                        "PaginationArgs.Start",
                        "PaginationArgs.Limit",
                        "FilterInfo",
                        "OrderInfos"});
            table4.AddRow(new string[] {
                        "\\\\devGroup1.{guid}",
                        "1",
                        "10",
                        "{null}",
                        "[{\"By\": \"DeviceName\", \"Descending\": false, \"PropertyType\": \"Property\" }]"});
#line 33
 testRunner.When("I call Public API function DeviceInformation/GetDeviceList using request with pro" +
                    "perties as follows:", ((string)(null)), table4, "When ");
#line 36
 testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassTypeName",
                        "DeviceName"});
            table5.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulator01.{guid}"});
            table5.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulator02.{guid}"});
            table5.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulator03.{guid}"});
            table5.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulator04.{guid}"});
            table5.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulator05.{guid}"});
#line 37
 testRunner.And("Last call to DeviceInformation/GetDeviceList has resulted in the following list o" +
                    "f devices:", ((string)(null)), table5, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calling WC version for another device group - get all devices from this group")]
        [NUnit.Framework.CategoryAttribute("CarryOverScenarioContext")]
        public virtual void CallingWCVersionForAnotherDeviceGroup_GetAllDevicesFromThisGroup()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calling WC version for another device group - get all devices from this group", new string[] {
                        "CarryOverScenarioContext"});
#line 46
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 47
 testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Path",
                        "PaginationArgs.Start",
                        "PaginationArgs.Limit",
                        "FilterInfo",
                        "OrderInfos"});
            table6.AddRow(new string[] {
                        "\\\\devGroup2.{guid}",
                        "1",
                        "10",
                        "{null}",
                        "[{\"By\": \"DeviceName\", \"Descending\": false, \"PropertyType\": \"Property\" }]"});
#line 48
 testRunner.When("I call Public API function DeviceInformation/GetDeviceList using request with pro" +
                    "perties as follows:", ((string)(null)), table6, "When ");
#line 51
 testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassTypeName",
                        "DeviceName"});
            table7.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulator06.{guid}"});
            table7.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulator07.{guid}"});
            table7.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulator08.{guid}"});
            table7.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulator09.{guid}"});
            table7.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulator10.{guid}"});
#line 52
 testRunner.And("Last call to DeviceInformation/GetDeviceList has resulted in the following list o" +
                    "f devices:", ((string)(null)), table7, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calling WC version for child group inside Root group - get all devices from this " +
            "group")]
        [NUnit.Framework.IgnoreAttribute()]
        [NUnit.Framework.CategoryAttribute("CarryOverScenarioContext")]
        public virtual void CallingWCVersionForChildGroupInsideRootGroup_GetAllDevicesFromThisGroup()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calling WC version for child group inside Root group - get all devices from this " +
                    "group", new string[] {
                        "ignore",
                        "CarryOverScenarioContext"});
#line 62
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 63
 testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Path",
                        "PaginationArgs.Start",
                        "PaginationArgs.Limit",
                        "FilterInfo",
                        "OrderInfos"});
            table8.AddRow(new string[] {
                        "\\\\devGroup2.{guid}\\\\devGroup4.{time}",
                        "1",
                        "10",
                        "{null}",
                        "[{\"By\": \"DeviceName\", \"Descending\": false, \"PropertyType\": \"Property\" }]"});
#line 64
 testRunner.When("I call Public API function DeviceInformation/GetDeviceList using request with pro" +
                    "perties as follows:", ((string)(null)), table8, "When ");
#line 67
 testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassTypeName",
                        "DeviceName"});
            table9.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulator11.{guid}"});
#line 68
 testRunner.And("Last call to DeviceInformation/GetDeviceList has resulted in the following list o" +
                    "f devices:", ((string)(null)), table9, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calling WC version with no group - get all devices from all group with view permi" +
            "ssion")]
        [NUnit.Framework.IgnoreAttribute()]
        [NUnit.Framework.CategoryAttribute("CarryOverScenarioContext")]
        public virtual void CallingWCVersionWithNoGroup_GetAllDevicesFromAllGroupWithViewPermission()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calling WC version with no group - get all devices from all group with view permi" +
                    "ssion", new string[] {
                        "ignore",
                        "CarryOverScenarioContext"});
#line 75
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 76
 testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Path",
                        "PaginationArgs.Start",
                        "PaginationArgs.Limit",
                        "FilterInfo",
                        "OrderInfos"});
            table10.AddRow(new string[] {
                        "null",
                        "1",
                        "10",
                        "{null}",
                        "[{\"By\": \"DeviceName\", \"Descending\": false, \"PropertyType\": \"Property\" }]"});
#line 77
 testRunner.When("I call Public API function DeviceInformation/GetDeviceList using request with pro" +
                    "perties as follows:", ((string)(null)), table10, "When ");
#line 80
 testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassTypeName",
                        "DeviceName"});
            table11.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulator01.{guid}"});
            table11.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulator02.{guid}"});
            table11.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulator03.{guid}"});
            table11.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulator04.{guid}"});
            table11.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulator05.{guid}"});
            table11.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulator06.{guid}"});
            table11.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulator07.{guid}"});
            table11.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulator08.{guid}"});
            table11.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulator09.{guid}"});
            table11.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulator10.{guid}"});
#line 81
 testRunner.And("Last call to DeviceInformation/GetDeviceList has resulted in the following list o" +
                    "f devices:", ((string)(null)), table11, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calling WC version for device group with paging - only devices for current page r" +
            "eturned")]
        [NUnit.Framework.CategoryAttribute("CarryOverScenarioContext")]
        public virtual void CallingWCVersionForDeviceGroupWithPaging_OnlyDevicesForCurrentPageReturned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calling WC version for device group with paging - only devices for current page r" +
                    "eturned", new string[] {
                        "CarryOverScenarioContext"});
#line 95
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 96
 testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Path",
                        "PaginationArgs.Start",
                        "PaginationArgs.Limit",
                        "FilterInfo",
                        "OrderInfos"});
            table12.AddRow(new string[] {
                        "\\\\devGroup1.{guid}",
                        "1",
                        "2",
                        "{null}",
                        "[{\"By\": \"DeviceName\", \"Descending\": false, \"PropertyType\": \"Property\" }]"});
#line 97
 testRunner.When("I call Public API function DeviceInformation/GetDeviceList using request with pro" +
                    "perties as follows:", ((string)(null)), table12, "When ");
#line 100
 testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassTypeName",
                        "DeviceName"});
            table13.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulator01.{guid}"});
            table13.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulator02.{guid}"});
#line 101
 testRunner.And("Last call to DeviceInformation/GetDeviceList has resulted in the following list o" +
                    "f devices:", ((string)(null)), table13, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calling WC version for device group with paging 2 - only devices for current page" +
            " returned")]
        [NUnit.Framework.CategoryAttribute("CarryOverScenarioContext")]
        public virtual void CallingWCVersionForDeviceGroupWithPaging2_OnlyDevicesForCurrentPageReturned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calling WC version for device group with paging 2 - only devices for current page" +
                    " returned", new string[] {
                        "CarryOverScenarioContext"});
#line 107
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 108
 testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Path",
                        "PaginationArgs.Start",
                        "PaginationArgs.Limit",
                        "FilterInfo",
                        "OrderInfos"});
            table14.AddRow(new string[] {
                        "\\\\devGroup1.{guid}",
                        "2",
                        "2",
                        "",
                        "[{\"By\": \"DeviceName\", \"Descending\": false, \"PropertyType\": \"Property\" }]"});
#line 109
 testRunner.When("I call Public API function DeviceInformation/GetDeviceList using request with pro" +
                    "perties as follows:", ((string)(null)), table14, "When ");
#line 112
 testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassTypeName",
                        "DeviceName"});
            table15.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulator03.{guid}"});
            table15.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulator04.{guid}"});
#line 113
 testRunner.And("Last call to DeviceInformation/GetDeviceList has resulted in the following list o" +
                    "f devices:", ((string)(null)), table15, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calling SSP version as Administrator - unauthorized")]
        [NUnit.Framework.CategoryAttribute("CarryOverScenarioContext")]
        public virtual void CallingSSPVersionAsAdministrator_Unauthorized()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calling SSP version as Administrator - unauthorized", new string[] {
                        "CarryOverScenarioContext"});
#line 119
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 120
 testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "OrderInfos"});
            table16.AddRow(new string[] {
                        "[{\"By\": \"DeviceName\", \"Descending\": false, \"PropertyType\": \"Property\" }]"});
#line 121
 testRunner.When("I call Public API function DeviceInformation/GetDeviceListSSP using request with " +
                    "properties as follows:", ((string)(null)), table16, "When ");
#line 124
 testRunner.Then("Public API response is \'Unauthorized access\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calling SSP version as SSPUser with permission - all user devices returned")]
        [NUnit.Framework.CategoryAttribute("CarryOverScenarioContext")]
        public virtual void CallingSSPVersionAsSSPUserWithPermission_AllUserDevicesReturned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calling SSP version as SSPUser with permission - all user devices returned", new string[] {
                        "CarryOverScenarioContext"});
#line 127
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 128
 testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityRole",
                        "PermissionType",
                        "PermissionName",
                        "IsAllowed"});
            table17.AddRow(new string[] {
                        "DeviceOwner",
                        "Feature",
                        "LoginSSP",
                        "true"});
#line 129
 testRunner.And("I have granted principal \'SSPUser\' the permissions as follows:", ((string)(null)), table17, "And ");
#line 132
 testRunner.And("I am a user with name \'SSPUser\' and password \'Welcome1234\' and role \'ssp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "OrderInfos"});
            table18.AddRow(new string[] {
                        "[{\"By\": \"DeviceName\", \"Descending\": false, \"PropertyType\": \"Property\" }]"});
#line 133
 testRunner.When("I call Public API function DeviceInformation/GetDeviceListSSP using request with " +
                    "properties as follows:", ((string)(null)), table18, "When ");
#line 136
 testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassTypeName",
                        "DeviceName"});
            table19.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulator01.{guid}"});
            table19.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulator02.{guid}"});
            table19.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulator03.{guid}"});
            table19.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulator04.{guid}"});
            table19.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulator05.{guid}"});
#line 137
 testRunner.And("Last call to DeviceInformation/GetDeviceList has resulted in the following list o" +
                    "f devices:", ((string)(null)), table19, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calling SSP version as SSP user and PropertyType as label - all user devices retu" +
            "rned")]
        [NUnit.Framework.CategoryAttribute("CarryOverScenarioContext")]
        public virtual void CallingSSPVersionAsSSPUserAndPropertyTypeAsLabel_AllUserDevicesReturned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calling SSP version as SSP user and PropertyType as label - all user devices retu" +
                    "rned", new string[] {
                        "CarryOverScenarioContext"});
#line 146
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 147
 testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityRole",
                        "PermissionType",
                        "PermissionName",
                        "IsAllowed"});
            table20.AddRow(new string[] {
                        "DeviceOwner",
                        "Feature",
                        "LoginSSP",
                        "true"});
#line 148
 testRunner.And("I have granted principal \'SSPUser\' the permissions as follows:", ((string)(null)), table20, "And ");
#line 151
 testRunner.And("I am a user with name \'SSPUser\' and password \'Welcome1234\' and role \'ssp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "OrderInfos"});
            table21.AddRow(new string[] {
                        "[{\"By\": \"DeviceName\", \"Descending\": false, \"PropertyType\": \"Label\" }]"});
#line 152
 testRunner.When("I call Public API function DeviceInformation/GetDeviceListSSP using request with " +
                    "properties as follows:", ((string)(null)), table21, "When ");
#line 155
 testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassTypeName",
                        "DeviceName"});
            table22.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulator01.{guid}"});
            table22.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulator02.{guid}"});
            table22.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulator03.{guid}"});
            table22.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulator04.{guid}"});
            table22.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulator05.{guid}"});
#line 156
 testRunner.And("Last call to DeviceInformation/GetDeviceList has resulted in the following list o" +
                    "f devices:", ((string)(null)), table22, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filter Device results with Mac address")]
        [NUnit.Framework.CategoryAttribute("CarryOverScenarioContext")]
        public virtual void FilterDeviceResultsWithMacAddress()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filter Device results with Mac address", new string[] {
                        "CarryOverScenarioContext"});
#line 165
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceName",
                        "RuleName",
                        "LdapConnection",
                        "LdapUserName",
                        "LdapUserPassword",
                        "TargetGroup",
                        "DeviceId",
                        "MacAddress"});
            table23.AddRow(new string[] {
                        "autogenerate IosSimulatorDevice_1.{guid}",
                        "Rule1{guid}",
                        "{sotiqa}",
                        "SSPUser",
                        "Welcome1234",
                        "\\\\devGroup1.{guid}",
                        "autogenerate deviceId_1.{guid}",
                        "autogenerate mac_1.{guid}"});
            table23.AddRow(new string[] {
                        "autogenerate IosSimulatorDevice_2.{guid}",
                        "Rule1{guid}",
                        "{sotiqa}",
                        "SSPUser",
                        "Welcome1234",
                        "\\\\devGroup1.{guid}",
                        "autogenerate deviceId_2.{guid}",
                        "autogenerate mac_2.{guid}"});
#line 166
 testRunner.Given("I have enrolled Ios Devices with properties as follows:", ((string)(null)), table23, "Given ");
#line 170
 testRunner.And("I am a user with name \'SSPUser\' and password \'Welcome1234\' and role \'ssp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "FilterInfo"});
            table24.AddRow(new string[] {
                        "[{\"Property\":{\"key\":\"MACAddress\",\"Value\":\"mac_1.{guid}\"}}]"});
#line 171
 testRunner.When("I call Public API function DeviceInformation/GetDeviceListSSP using request with " +
                    "properties as follows:", ((string)(null)), table24, "When ");
#line 174
 testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassTypeName",
                        "DeviceName"});
            table25.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulatorDevice_1.{guid}"});
#line 175
 testRunner.And("Last call to DeviceInformation/GetDeviceList has resulted in the following list o" +
                    "f devices:", ((string)(null)), table25, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filter Device results with DeviceId")]
        [NUnit.Framework.CategoryAttribute("CarryOverScenarioContext")]
        public virtual void FilterDeviceResultsWithDeviceId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filter Device results with DeviceId", new string[] {
                        "CarryOverScenarioContext"});
#line 181
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceName",
                        "RuleName",
                        "LdapConnection",
                        "LdapUserName",
                        "LdapUserPassword",
                        "TargetGroup",
                        "DeviceId",
                        "MacAddress"});
            table26.AddRow(new string[] {
                        "autogenerate IosSimulatorDevice_1.{guid}",
                        "Rule1{guid}",
                        "{sotiqa}",
                        "SSPUser",
                        "Welcome1234",
                        "\\\\devGroup1.{guid}",
                        "autogenerate deviceId_1.{guid}",
                        "autogenerate mac_1.{guid}"});
            table26.AddRow(new string[] {
                        "autogenerate IosSimulatorDevice_2.{guid}",
                        "Rule1{guid}",
                        "{sotiqa}",
                        "SSPUser",
                        "Welcome1234",
                        "\\\\devGroup1.{guid}",
                        "autogenerate deviceId_2.{guid}",
                        "autogenerate mac_2.{guid}"});
#line 182
 testRunner.Given("I have enrolled Ios Devices with properties as follows:", ((string)(null)), table26, "Given ");
#line 186
 testRunner.And("I am a user with name \'SSPUser\' and password \'Welcome1234\' and role \'ssp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "FilterInfo"});
            table27.AddRow(new string[] {
                        "[{\"Property\":{\"key\":\"DeviceId\",\"Value\":\"deviceId_1.{guid}\"}}]"});
#line 187
 testRunner.When("I call Public API function DeviceInformation/GetDeviceListSSP using request with " +
                    "properties as follows:", ((string)(null)), table27, "When ");
#line 190
 testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassTypeName",
                        "DeviceName"});
            table28.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulatorDevice_1.{guid}"});
#line 191
 testRunner.And("Last call to DeviceInformation/GetDeviceList has resulted in the following list o" +
                    "f devices:", ((string)(null)), table28, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filter Device results with multiple mac address")]
        [NUnit.Framework.IgnoreAttribute()]
        [NUnit.Framework.CategoryAttribute("CarryOverScenarioContext")]
        public virtual void FilterDeviceResultsWithMultipleMacAddress()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filter Device results with multiple mac address", new string[] {
                        "ignore",
                        "CarryOverScenarioContext"});
#line 197
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceName",
                        "RuleName",
                        "LdapConnection",
                        "LdapUserName",
                        "LdapUserPassword",
                        "TargetGroup",
                        "DeviceId",
                        "MacAddress"});
            table29.AddRow(new string[] {
                        "autogenerate IosSimulatorDevice_1.{guid}",
                        "Rule1{guid}",
                        "{sotiqa}",
                        "SSPUser",
                        "Welcome1234",
                        "\\\\devGroup1.{guid}",
                        "autogenerate deviceId_1.{guid}",
                        "autogenerate mac_1.{guid}"});
            table29.AddRow(new string[] {
                        "autogenerate IosSimulatorDevice_2.{guid}",
                        "Rule1{guid}",
                        "{sotiqa}",
                        "SSPUser",
                        "Welcome1234",
                        "\\\\devGroup1.{guid}",
                        "autogenerate deviceId_2.{guid}",
                        "autogenerate mac_2.{time}"});
#line 198
 testRunner.Given("I have enrolled Ios Devices with properties as follows:", ((string)(null)), table29, "Given ");
#line 202
 testRunner.And("I am a user with name \'SSPUser\' and password \'Welcome1234\' and role \'ssp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "FilterInfo"});
            table30.AddRow(new string[] {
                        "[{\"Property\":{\"key\":\"MACAddress\",\"Value\":\"mac_1.{guid}\"}},{\"Property\":{\"key\":\"MAC" +
                            "Address\",\"Value\":\"mac2.{time}\"}}]"});
#line 203
 testRunner.When("I call Public API function DeviceInformation/GetDeviceListSSP using request with " +
                    "properties as follows:", ((string)(null)), table30, "When ");
#line 206
 testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassTypeName",
                        "DeviceName"});
            table31.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulatorDevice_1.{guid}"});
            table31.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulatorDevice_2.{guid}"});
#line 207
 testRunner.And("Last call to DeviceInformation/GetDeviceList has resulted in the following list o" +
                    "f devices:", ((string)(null)), table31, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filter Device results with either device id or Macaddress")]
        [NUnit.Framework.IgnoreAttribute()]
        [NUnit.Framework.CategoryAttribute("CarryOverScenarioContext")]
        public virtual void FilterDeviceResultsWithEitherDeviceIdOrMacaddress()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filter Device results with either device id or Macaddress", new string[] {
                        "ignore",
                        "CarryOverScenarioContext"});
#line 214
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceName",
                        "RuleName",
                        "LdapConnection",
                        "LdapUserName",
                        "LdapUserPassword",
                        "TargetGroup",
                        "DeviceId",
                        "MacAddress"});
            table32.AddRow(new string[] {
                        "autogenerate IosSimulatorDevice_1.{guid}",
                        "Rule1{guid}",
                        "{sotiqa}",
                        "SSPUser",
                        "Welcome1234",
                        "\\\\devGroup1.{guid}",
                        "autogenerate deviceId_1.{guid}",
                        "autogenerate mac1.{time}"});
            table32.AddRow(new string[] {
                        "autogenerate IosSimulatorDevice_2.{guid}",
                        "Rule1{guid}",
                        "{sotiqa}",
                        "SSPUser",
                        "Welcome1234",
                        "\\\\devGroup1.{guid}",
                        "autogenerate deviceId_2.{guid}",
                        "autogenerate mac2.{guid}"});
#line 215
 testRunner.Given("I have enrolled Ios Devices with properties as follows:", ((string)(null)), table32, "Given ");
#line 220
 testRunner.And("I am a user with name \'SSPUser\' and password \'Welcome1234\' and role \'ssp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "FilterInfo"});
            table33.AddRow(new string[] {
                        "[{\"Property\":{\"key\":\"DeviceId\",\"Value\":\"deviceId_1.{guid}\"}},{\"Property\":{\"key\":\"" +
                            "MACAddress\",\"Value\":\"mac2.{time}\"}}]"});
#line 221
 testRunner.When("I call Public API function DeviceInformation/GetDeviceListSSP using request with " +
                    "properties as follows:", ((string)(null)), table33, "When ");
#line 224
 testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassTypeName",
                        "DeviceName"});
            table34.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulatorDevice_1.{guid}"});
            table34.AddRow(new string[] {
                        "DeviceIos",
                        "IosSimulatorDevice_2.{guid}"});
#line 225
 testRunner.And("Last call to DeviceInformation/GetDeviceList has resulted in the following list o" +
                    "f devices:", ((string)(null)), table34, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
