// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Soti.MobiControl.Bdd.PublicApiTests.Features.PublicAPI.Device
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DeviceApplications")]
    public partial class DeviceApplicationsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DeviceApplications.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DeviceApplications", "In order to verify installed applications as an administrator \r\nI want to enroll " +
                    "and checkin an ios device and compare with list of installed applications", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify installed applications")]
        [NUnit.Framework.IgnoreAttribute()]
        public virtual void VerifyInstalledApplications()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify installed applications", new string[] {
                        "ignore"});
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Identifier",
                        "ShortVersion",
                        "Version",
                        "BundleSize",
                        "DynamicSize"});
            table1.AddRow(new string[] {
                        "autogenerate {guid}.ApplicationName",
                        "autogenerate {guid}.AppId",
                        "1.0",
                        "1.0.0",
                        "1024",
                        "2048"});
            table1.AddRow(new string[] {
                        "autogenerate {guid}.ApplicationName",
                        "autogenerate {guid}.AppId",
                        "1.1",
                        "1.1.0",
                        "2048",
                        "4096"});
            table1.AddRow(new string[] {
                        "autogenerate {guid}.ApplicationName",
                        "autogenerate {guid}.AppId",
                        "1.2",
                        "1.2.0",
                        "4096",
                        "8192"});
            table1.AddRow(new string[] {
                        "autogenerate {guid}.ApplicationName",
                        "autogenerate {guid}.AppId",
                        "1.3",
                        "1.3.0",
                        "8192",
                        "16384"});
            table1.AddRow(new string[] {
                        "autogenerate {guid}.ApplicationName",
                        "autogenerate {guid}.AppId",
                        "1.4",
                        "1.4.0",
                        "16384",
                        "32768"});
            table1.AddRow(new string[] {
                        "autogenerate {guid}.ApplicationName",
                        "autogenerate {guid}.AppId",
                        "1.5",
                        "1.5.0",
                        "32768",
                        "65536"});
#line 8
testRunner.And("Ios Device contains applications as follows:", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceName",
                        "RuleName",
                        "LdapConnection",
                        "LdapUserName",
                        "LdapUserPassword",
                        "OSVersion"});
            table2.AddRow(new string[] {
                        "autogenerate iosSimulator_compact.{buildnumber}.{guid}",
                        "{iosrule_soti.net}",
                        "{soti.net}",
                        "testuser2",
                        "Bonjour321",
                        "8.0"});
#line 16
testRunner.And("I enrolled Ios Device with properties as follows:", ((string)(null)), table2, "And ");
#line 19
testRunner.When("I make a call to public API to get installed applications for the device", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
testRunner.Then("The list of installed apps returned should match the one on server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
