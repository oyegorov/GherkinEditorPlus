// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Soti.MobiControl.Bdd.PublicApiTests.Features.PublicAPI.Device
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Devices")]
    public partial class DevicesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Devices.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Devices", "Operation related management of devices", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line 5
testRunner.Given("I am a client of Public API with name \'ApiClient\' and secret \'ClientSecret\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
 testRunner.And("I make calls to Public API on behalf of user \'Administrator\' with password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get all Devices")]
        public virtual void GetAllDevices()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all Devices", ((string[])(null)));
#line 8
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 9
testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceName",
                        "RuleName",
                        "LdapConnection",
                        "LdapUserName",
                        "LdapUserPassword",
                        "DeviceId"});
            table1.AddRow(new string[] {
                        "autogenerate deviceId01.{guid}",
                        "{iosrule_soti.net}",
                        "{soti.net}",
                        "testuser2",
                        "Bonjour321",
                        "deviceId01.{guid}"});
#line 10
testRunner.And("I enrolled Ios Device with properties as follows:", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId"});
            table2.AddRow(new string[] {
                        "{null}"});
#line 14
testRunner.When("I invoke GET on Devices with following properties:", ((string)(null)), table2, "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Kind",
                        "ComplianceStatus",
                        "DeviceId"});
            table3.AddRow(new string[] {
                        "iOS",
                        "true",
                        "deviceId01.{guid}"});
#line 17
testRunner.Then("Public API response includes the following devices:", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Return No devices when take is more than available devices")]
        public virtual void ReturnNoDevicesWhenTakeIsMoreThanAvailableDevices()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Return No devices when take is more than available devices", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 23
testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceName",
                        "RuleName",
                        "LdapConnection",
                        "LdapUserName",
                        "LdapUserPassword",
                        "DeviceId"});
            table4.AddRow(new string[] {
                        "autogenerate deviceId02.{guid}",
                        "{iosrule_soti.net}",
                        "{soti.net}",
                        "testuser2",
                        "Bonjour321",
                        "deviceId02.{guid}"});
#line 24
testRunner.And("I enrolled Ios Device with properties as follows:", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "path",
                        "skip",
                        "take",
                        "order",
                        "filter",
                        "userFilter"});
            table5.AddRow(new string[] {
                        "{null}",
                        "20",
                        "100",
                        "{null}",
                        "{null}",
                        "{null}"});
#line 27
testRunner.When("I invoke GET on Devices with properties as follows:", ((string)(null)), table5, "When ");
#line 30
testRunner.Then("Public API response Contains No Devices", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get devices by deviceId")]
        public virtual void GetDevicesByDeviceId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get devices by deviceId", ((string[])(null)));
#line 33
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 34
testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceName",
                        "RuleName",
                        "LdapConnection",
                        "LdapUserName",
                        "LdapUserPassword",
                        "DeviceId"});
            table6.AddRow(new string[] {
                        "autogenerate deviceId03.{guid}",
                        "{iosrule_soti.net}",
                        "{soti.net}",
                        "testuser2",
                        "Bonjour321",
                        "deviceId03.{guid}"});
#line 35
testRunner.And("I enrolled Ios Device with properties as follows:", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId"});
            table7.AddRow(new string[] {
                        "deviceId03.{guid}"});
#line 38
testRunner.When("I invoke GET on Devices with following properties:", ((string)(null)), table7, "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Kind",
                        "ComplianceStatus",
                        "DeviceId"});
            table8.AddRow(new string[] {
                        "iOS",
                        "true",
                        "deviceId03.{guid}"});
#line 41
testRunner.Then("Public API response contains the following device:", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get devices with legal filters")]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "AfwProfileDisabled:true", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "AfwProvisionStage:NotApplicable", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "KnoxAttestationStatus:Nonexisting", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "KnoxCapability:NotSupported", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "AvailableExternalStorage:0", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "AvailableMemory:0", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "AvailableSDCardStorage:0", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "AvailableStorage:0", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "TotalExternalStorage:0", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "TotalMemory:0", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "TotalSDCardStorage:0", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "TotalStorage:0", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "AgentVersion:Nonexisting", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "BackupBatteryStatus:0", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "BatteryStatus:0", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "BiosVersion:Nonexisting", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "CanResetPassword:true", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "DeviceId:Nonexisting", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "DeviceName:Nonexisting", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "ElmStatus:NotSupported", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "EnrollmentTime:Nonexisting", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "HardwareSerialNumber:Nonexisting", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "HardwareVersion:Nonexisting", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "HostName:Nonexisting", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "InRoaming:true", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "InRoamingSIM2:true", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "Ipv6:Nonexisting", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "IsOnline:true", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "LastCheckInTime:Nonexisting", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "LastAgentConnectTime:Nonexisting", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "LastAgentDisconnectTime:Nonexisting", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "MACAddress:Nonexisting", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "Manufacturer:Nonexisting", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "Mode:Wiped", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "Model:Nonexisting", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "OEMVersion:Nonexisting", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "OSVersion:Nonexisting", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "PhoneNumber:Nonexisting", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "PhoneNumberSIM2:Nonexisting", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "Platform:Unknown", "{null}", null)]
        public virtual void GetDevicesWithLegalFilters(string path, string skip, string take, string order, string filter, string userFilter, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get devices with legal filters", exampleTags);
#line 45
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 46
testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Kind",
                        "Icon",
                        "Path"});
            table9.AddRow(new string[] {
                        "autogenerate devicegroup_empty.{guid}",
                        "Regular",
                        "Yellow",
                        "\\\\devicegroup_empty.{guid}"});
#line 47
testRunner.And("I have created a device group with properties as follows:", ((string)(null)), table9, "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "path",
                        "skip",
                        "take",
                        "order",
                        "filter",
                        "userFilter"});
            table10.AddRow(new string[] {
                        string.Format("{0}", path),
                        string.Format("{0}", skip),
                        string.Format("{0}", take),
                        string.Format("{0}", order),
                        string.Format("{0}", filter),
                        string.Format("{0}", userFilter)});
#line 50
testRunner.When("I invoke GET on Devices with properties as follows:", ((string)(null)), table10, "When ");
#line 53
testRunner.Then("Public API response Contains No Devices", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get devices with incorrect filters")]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "AfwProfileDisabled:123", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "AvailableExternalStorage:OneTwoThree", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "NonexistingProperty:0", "{null}", null)]
        public virtual void GetDevicesWithIncorrectFilters(string path, string skip, string take, string order, string filter, string userFilter, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get devices with incorrect filters", exampleTags);
#line 97
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 98
testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Kind",
                        "Icon",
                        "Path"});
            table11.AddRow(new string[] {
                        "autogenerate devicegroup_empty.{guid}",
                        "Regular",
                        "Yellow",
                        "\\\\devicegroup_empty.{guid}"});
#line 99
testRunner.And("I have created a device group with properties as follows:", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "path",
                        "skip",
                        "take",
                        "order",
                        "filter",
                        "userFilter"});
            table12.AddRow(new string[] {
                        string.Format("{0}", path),
                        string.Format("{0}", skip),
                        string.Format("{0}", take),
                        string.Format("{0}", order),
                        string.Format("{0}", filter),
                        string.Format("{0}", userFilter)});
#line 102
testRunner.When("I invoke GET on Devices with properties as follows:", ((string)(null)), table12, "When ");
#line 105
testRunner.Then("Public API response is \'errorCode: 2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get devices with legal user filters from empty device group")]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "{null}", "UserName:Name", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "{null}", "UserId:Id", null)]
        public virtual void GetDevicesWithLegalUserFiltersFromEmptyDeviceGroup(string path, string skip, string take, string order, string filter, string userFilter, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get devices with legal user filters from empty device group", exampleTags);
#line 113
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 114
testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Kind",
                        "Icon",
                        "Path"});
            table13.AddRow(new string[] {
                        "autogenerate devicegroup_empty.{guid}",
                        "Regular",
                        "Yellow",
                        "\\\\devicegroup_empty.{guid}"});
#line 115
testRunner.And("I have created a device group with properties as follows:", ((string)(null)), table13, "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "path",
                        "skip",
                        "take",
                        "order",
                        "filter",
                        "userFilter"});
            table14.AddRow(new string[] {
                        string.Format("{0}", path),
                        string.Format("{0}", skip),
                        string.Format("{0}", take),
                        string.Format("{0}", order),
                        string.Format("{0}", filter),
                        string.Format("{0}", userFilter)});
#line 118
testRunner.When("I invoke GET on Devices with properties as follows:", ((string)(null)), table14, "When ");
#line 121
testRunner.Then("Public API response Contains No Devices", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get devices with incorrect user filters")]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "{null}", "Nonexisting:Dummy", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "{null}", "BadFilter:123", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "{null}", "{null}", "DeviceName:Nonexisting", null)]
        public virtual void GetDevicesWithIncorrectUserFilters(string path, string skip, string take, string order, string filter, string userFilter, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get devices with incorrect user filters", exampleTags);
#line 128
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 129
testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Kind",
                        "Icon",
                        "Path"});
            table15.AddRow(new string[] {
                        "autogenerate devicegroup_empty.{guid}",
                        "Regular",
                        "Yellow",
                        "\\\\devicegroup_empty.{guid}"});
#line 130
testRunner.And("I have created a device group with properties as follows:", ((string)(null)), table15, "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "path",
                        "skip",
                        "take",
                        "order",
                        "filter",
                        "userFilter"});
            table16.AddRow(new string[] {
                        string.Format("{0}", path),
                        string.Format("{0}", skip),
                        string.Format("{0}", take),
                        string.Format("{0}", order),
                        string.Format("{0}", filter),
                        string.Format("{0}", userFilter)});
#line 133
testRunner.When("I invoke GET on Devices with properties as follows:", ((string)(null)), table16, "When ");
#line 136
testRunner.Then("Public API response is \'errorCode: 2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get devices with incorrect sort criteria")]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "Olshser", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "Yegoole", "{null}", "{null}", null)]
        public virtual void GetDevicesWithIncorrectSortCriteria(string path, string skip, string take, string order, string filter, string userFilter, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get devices with incorrect sort criteria", exampleTags);
#line 144
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 145
testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Kind",
                        "Icon",
                        "Path"});
            table17.AddRow(new string[] {
                        "autogenerate devicegroup_empty.{guid}",
                        "Regular",
                        "Yellow",
                        "\\\\devicegroup_empty.{guid}"});
#line 146
testRunner.And("I have created a device group with properties as follows:", ((string)(null)), table17, "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "path",
                        "skip",
                        "take",
                        "order",
                        "filter",
                        "userFilter"});
            table18.AddRow(new string[] {
                        string.Format("{0}", path),
                        string.Format("{0}", skip),
                        string.Format("{0}", take),
                        string.Format("{0}", order),
                        string.Format("{0}", filter),
                        string.Format("{0}", userFilter)});
#line 149
testRunner.When("I invoke GET on Devices with properties as follows:", ((string)(null)), table18, "When ");
#line 152
testRunner.Then("Public API response is \'errorCode: 2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get devices with legal sort criteria")]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "AfwProfileDisabled", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "AfwProvisionStage", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "AntivirusDefinitionsVersion", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "LastEmptyQuarantine", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "LastVirusDefUpdate", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "LastVirusScan", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "IntegrityServiceBaselineStatus", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "KnoxAttestationCapability", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "KnoxAttestationStatus", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "KnoxCapability", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "AvailableExternalStorage", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "AvailableMemory", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "AvailableSDCardStorage", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "AvailableStorage", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "TotalExternalStorage", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "TotalMemory", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "TotalSDCardStorage", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "TotalStorage", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "AgentVersion", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "BackupBatteryStatus", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "BatteryStatus", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "BiosVersion", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "BluetoothMACAddress", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "BuildVersion", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "CanResetPassword", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "CarrierSettingsVersion", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "CellularCarrier", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "CellularSignalStrength", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "CellularTechnology", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "CpuId", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "CurrentMCC", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "CurrentMNC", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "DataRoamingEnabled", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "DeviceId", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "DeviceName", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "ElmStatus", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "EnrollmentTime", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "HardwareEncryptionCaps", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "HardwareSerialNumber", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "HardwareVersion", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "HostName", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "ICCID", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "InRoaming", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "InRoamingSIM2", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "Ipv6", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "IsDeviceLocatorServiceEnabled", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "IsDoNotDisturbInEffect", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "IsITunesStoreAccountActive", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "IsOnline", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "IsPersonalHotspotEnabled", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "IsSupervised", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "LastCheckInTime", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "LastAgentConnectTime", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "LastAgentDisconnectTime", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "LastStatusUpdate", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "MACAddress", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "Manufacturer", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "ManufacturerSerialNumber", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "Mode", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "Model", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "ModemFirmwareVersion", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "NetworkBSSID", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "NetworkSSID", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "OEMVersion", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "OSVersion", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "PersonalizedName", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "PhoneNumber", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "PhoneNumberSIM2", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "Platform", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "ProductName", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "RadioVersion", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "IsOSSecure", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "IMEI_MEID_ESN", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "IMEI_MEID_ESN_SIM2", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "SIMCarrierNetwork", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "SubscriberMCC", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "SubscriberMNC", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "SubscriberNumber", "{null}", "{null}", null)]
        [NUnit.Framework.TestCaseAttribute("\\\\devicegroup_empty.{guid}", "0", "0", "SubscriberNumberSIM2", "{null}", "{null}", null)]
        public virtual void GetDevicesWithLegalSortCriteria(string path, string skip, string take, string order, string filter, string userFilter, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get devices with legal sort criteria", exampleTags);
#line 160
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 161
testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Kind",
                        "Icon",
                        "Path"});
            table19.AddRow(new string[] {
                        "autogenerate devicegroup_empty.{guid}",
                        "Regular",
                        "Yellow",
                        "\\\\devicegroup_empty.{guid}"});
#line 162
testRunner.And("I have created a device group with properties as follows:", ((string)(null)), table19, "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "path",
                        "skip",
                        "take",
                        "order",
                        "filter",
                        "userFilter"});
            table20.AddRow(new string[] {
                        string.Format("{0}", path),
                        string.Format("{0}", skip),
                        string.Format("{0}", take),
                        string.Format("{0}", order),
                        string.Format("{0}", filter),
                        string.Format("{0}", filter)});
#line 165
testRunner.When("I invoke GET on Devices with properties as follows:", ((string)(null)), table20, "When ");
#line 168
testRunner.Then("Public API response Contains No Devices", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Move device to Another group")]
        public virtual void MoveDeviceToAnotherGroup()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Move device to Another group", ((string[])(null)));
#line 252
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 253
testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceName",
                        "RuleName",
                        "LdapConnection",
                        "LdapUserName",
                        "LdapUserPassword",
                        "DeviceId"});
            table21.AddRow(new string[] {
                        "autogenerate deviceId04.{guid}",
                        "{iosrule_soti.net}",
                        "{soti.net}",
                        "testuser2",
                        "Bonjour321",
                        "deviceId04.{guid}"});
#line 254
testRunner.And("I enrolled Ios Device with properties as follows:", ((string)(null)), table21, "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Kind",
                        "Icon",
                        "Path"});
            table22.AddRow(new string[] {
                        "autogenerate devicegroup_1.{guid}",
                        "Regular",
                        "Yellow",
                        "\\\\devicegroup_1.{guid}"});
#line 257
testRunner.And("I have created a device group with properties as follows:", ((string)(null)), table22, "And ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "NewPath"});
            table23.AddRow(new string[] {
                        "\\\\devicegroup_1.{guid}"});
#line 260
testRunner.When("I invoke PUT on device with deviceId \'deviceId04.{guid}\' and properties as follow" +
                    "s:", ((string)(null)), table23, "When ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "path",
                        "skip",
                        "take",
                        "order",
                        "filter",
                        "userFilter"});
            table24.AddRow(new string[] {
                        "\\\\devicegroup_1.{guid}",
                        "{null}",
                        "{null}",
                        "{null}",
                        "{null}",
                        "{null}"});
#line 263
testRunner.When("I invoke GET on Devices with properties as follows:", ((string)(null)), table24, "When ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Kind",
                        "ComplianceStatus",
                        "DeviceId"});
            table25.AddRow(new string[] {
                        "iOS",
                        "true",
                        "deviceId04.{guid}"});
#line 266
testRunner.Then("Public API response includes the following devices:", ((string)(null)), table25, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Collect data from device")]
        public virtual void CollectDataFromDevice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Collect data from device", ((string[])(null)));
#line 271
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 272
testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceName",
                        "RuleName",
                        "LdapConnection",
                        "LdapUserName",
                        "LdapUserPassword",
                        "DeviceId",
                        "OSVersion"});
            table26.AddRow(new string[] {
                        "autogenerate deviceId05.{guid}",
                        "{iosrule_soti.net}",
                        "{soti.net}",
                        "testuser2",
                        "Bonjour321",
                        "deviceId05.{guid}",
                        "9.0"});
#line 273
testRunner.And("I enrolled Ios Device with properties as follows:", ((string)(null)), table26, "And ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "startDate",
                        "endDate",
                        "builtInDataType"});
            table27.AddRow(new string[] {
                        "2015-10-15",
                        "2040-10-15",
                        "OperatingSystemVersion"});
#line 276
testRunner.When("I invoke GET on device with deviceId \'deviceId05.{guid}\' and properties as follow" +
                    "s:", ((string)(null)), table27, "When ");
#line 279
testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get devices with user name filter")]
        [NUnit.Framework.TestCaseAttribute("{null}", "0", "0", "{null}", "{null}", "UserName:testuser2", null)]
        public virtual void GetDevicesWithUserNameFilter(string path, string skip, string take, string order, string filter, string userFilter, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get devices with user name filter", exampleTags);
#line 282
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 283
testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceName",
                        "RuleName",
                        "LdapConnection",
                        "LdapUserName",
                        "LdapUserPassword",
                        "DeviceId"});
            table28.AddRow(new string[] {
                        "autogenerate gg.{guid}",
                        "{iosrule_soti.net}",
                        "{soti.net}",
                        "testuser2",
                        "Bonjour321",
                        "autogenerate d666.{guid}"});
#line 284
testRunner.And("I enrolled Ios Device with properties as follows:", ((string)(null)), table28, "And ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "path",
                        "skip",
                        "take",
                        "order",
                        "filter",
                        "userFilter"});
            table29.AddRow(new string[] {
                        string.Format("{0}", path),
                        string.Format("{0}", skip),
                        string.Format("{0}", take),
                        string.Format("{0}", order),
                        string.Format("{0}", filter),
                        string.Format("{0}", userFilter)});
#line 287
testRunner.When("I invoke GET on Devices with properties as follows:", ((string)(null)), table29, "When ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Kind",
                        "ComplianceStatus",
                        "DeviceId"});
            table30.AddRow(new string[] {
                        "iOS",
                        "true",
                        "d666.{guid}"});
#line 290
testRunner.Then("Public API response includes the following devices:", ((string)(null)), table30, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Setting and resetting string custom attribute")]
        public virtual void SettingAndResettingStringCustomAttribute()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Setting and resetting string custom attribute", ((string[])(null)));
#line 297
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 298
testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type",
                        "EnumValues"});
            table31.AddRow(new string[] {
                        "StringType",
                        "String",
                        "{null}"});
            table31.AddRow(new string[] {
                        "NumericType",
                        "Numeric",
                        "{null}"});
            table31.AddRow(new string[] {
                        "BoolType",
                        "Bool",
                        "{null}"});
            table31.AddRow(new string[] {
                        "DateType",
                        "Date",
                        "{null}"});
            table31.AddRow(new string[] {
                        "EnumType",
                        "Enum",
                        "One,Two,Three"});
#line 299
testRunner.And("I have the following custom attribute types:", ((string)(null)), table31, "And ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceName",
                        "RuleName",
                        "LdapConnection",
                        "LdapUserName",
                        "LdapUserPassword",
                        "DeviceId"});
            table32.AddRow(new string[] {
                        "autogenerate gg.{guid}",
                        "{iosrule_soti.net}",
                        "{soti.net}",
                        "testuser2",
                        "Bonjour321",
                        "autogenerate chudo.{guid}"});
#line 306
testRunner.And("I enrolled Ios Device with properties as follows:", ((string)(null)), table32, "And ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table33.AddRow(new string[] {
                        "StringType",
                        "MyStringValue"});
#line 309
testRunner.When("I set the following custom attribute values for device \'chudo.{guid}\' as follows:" +
                    "", ((string)(null)), table33, "When ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId"});
            table34.AddRow(new string[] {
                        "chudo.{guid}"});
#line 312
testRunner.When("I get custom attributes for the device:", ((string)(null)), table34, "When ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table35.AddRow(new string[] {
                        "StringType",
                        "MyStringValue"});
            table35.AddRow(new string[] {
                        "NumericType",
                        "{null}"});
            table35.AddRow(new string[] {
                        "BoolType",
                        "{null}"});
            table35.AddRow(new string[] {
                        "DateType",
                        "{null}"});
            table35.AddRow(new string[] {
                        "EnumType",
                        "{null}"});
#line 315
testRunner.Then("Response contains the following custom attribute values:", ((string)(null)), table35, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table36.AddRow(new string[] {
                        "StringType",
                        "UpdatedStringValue"});
#line 322
testRunner.When("I set the following custom attribute values for device \'chudo.{guid}\' as follows:" +
                    "", ((string)(null)), table36, "When ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId"});
            table37.AddRow(new string[] {
                        "chudo.{guid}"});
#line 325
testRunner.When("I get custom attributes for the device:", ((string)(null)), table37, "When ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table38.AddRow(new string[] {
                        "StringType",
                        "UpdatedStringValue"});
            table38.AddRow(new string[] {
                        "NumericType",
                        "{null}"});
            table38.AddRow(new string[] {
                        "BoolType",
                        "{null}"});
            table38.AddRow(new string[] {
                        "DateType",
                        "{null}"});
            table38.AddRow(new string[] {
                        "EnumType",
                        "{null}"});
#line 328
testRunner.Then("Response contains the following custom attribute values:", ((string)(null)), table38, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table39.AddRow(new string[] {
                        "StringType",
                        "{null}"});
#line 335
testRunner.When("I set the following custom attribute values for device \'chudo.{guid}\' as follows:" +
                    "", ((string)(null)), table39, "When ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId"});
            table40.AddRow(new string[] {
                        "chudo.{guid}"});
#line 338
testRunner.When("I get custom attributes for the device:", ((string)(null)), table40, "When ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table41.AddRow(new string[] {
                        "StringType",
                        "{null}"});
            table41.AddRow(new string[] {
                        "NumericType",
                        "{null}"});
            table41.AddRow(new string[] {
                        "BoolType",
                        "{null}"});
            table41.AddRow(new string[] {
                        "DateType",
                        "{null}"});
            table41.AddRow(new string[] {
                        "EnumType",
                        "{null}"});
#line 341
testRunner.Then("Response contains the following custom attribute values:", ((string)(null)), table41, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Setting and resetting integer custom attribute")]
        public virtual void SettingAndResettingIntegerCustomAttribute()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Setting and resetting integer custom attribute", ((string[])(null)));
#line 349
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 350
testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type",
                        "EnumValues"});
            table42.AddRow(new string[] {
                        "StringType",
                        "String",
                        "{null}"});
            table42.AddRow(new string[] {
                        "NumericType",
                        "Numeric",
                        "{null}"});
            table42.AddRow(new string[] {
                        "BoolType",
                        "Bool",
                        "{null}"});
            table42.AddRow(new string[] {
                        "DateType",
                        "Date",
                        "{null}"});
            table42.AddRow(new string[] {
                        "EnumType",
                        "Enum",
                        "One,Two,Three"});
#line 351
testRunner.And("I have the following custom attribute types:", ((string)(null)), table42, "And ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceName",
                        "RuleName",
                        "LdapConnection",
                        "LdapUserName",
                        "LdapUserPassword",
                        "DeviceId"});
            table43.AddRow(new string[] {
                        "autogenerate gg.{guid}",
                        "{iosrule_soti.net}",
                        "{soti.net}",
                        "testuser2",
                        "Bonjour321",
                        "autogenerate chudo.{guid}"});
#line 358
testRunner.And("I enrolled Ios Device with properties as follows:", ((string)(null)), table43, "And ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table44.AddRow(new string[] {
                        "NumericType",
                        "666"});
#line 361
testRunner.When("I set the following custom attribute values for device \'chudo.{guid}\' as follows:" +
                    "", ((string)(null)), table44, "When ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId"});
            table45.AddRow(new string[] {
                        "chudo.{guid}"});
#line 364
testRunner.When("I get custom attributes for the device:", ((string)(null)), table45, "When ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table46.AddRow(new string[] {
                        "StringType",
                        "{null}"});
            table46.AddRow(new string[] {
                        "NumericType",
                        "666"});
            table46.AddRow(new string[] {
                        "BoolType",
                        "{null}"});
            table46.AddRow(new string[] {
                        "DateType",
                        "{null}"});
            table46.AddRow(new string[] {
                        "EnumType",
                        "{null}"});
#line 367
testRunner.Then("Response contains the following custom attribute values:", ((string)(null)), table46, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table47.AddRow(new string[] {
                        "NumericType",
                        "777"});
#line 374
testRunner.When("I set the following custom attribute values for device \'chudo.{guid}\' as follows:" +
                    "", ((string)(null)), table47, "When ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId"});
            table48.AddRow(new string[] {
                        "chudo.{guid}"});
#line 377
testRunner.When("I get custom attributes for the device:", ((string)(null)), table48, "When ");
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table49.AddRow(new string[] {
                        "StringType",
                        "{null}"});
            table49.AddRow(new string[] {
                        "NumericType",
                        "777"});
            table49.AddRow(new string[] {
                        "BoolType",
                        "{null}"});
            table49.AddRow(new string[] {
                        "DateType",
                        "{null}"});
            table49.AddRow(new string[] {
                        "EnumType",
                        "{null}"});
#line 380
testRunner.Then("Response contains the following custom attribute values:", ((string)(null)), table49, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table50.AddRow(new string[] {
                        "NumericType",
                        "{null}"});
#line 387
testRunner.When("I set the following custom attribute values for device \'chudo.{guid}\' as follows:" +
                    "", ((string)(null)), table50, "When ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId"});
            table51.AddRow(new string[] {
                        "chudo.{guid}"});
#line 390
testRunner.When("I get custom attributes for the device:", ((string)(null)), table51, "When ");
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table52.AddRow(new string[] {
                        "StringType",
                        "{null}"});
            table52.AddRow(new string[] {
                        "NumericType",
                        "{null}"});
            table52.AddRow(new string[] {
                        "BoolType",
                        "{null}"});
            table52.AddRow(new string[] {
                        "DateType",
                        "{null}"});
            table52.AddRow(new string[] {
                        "EnumType",
                        "{null}"});
#line 393
testRunner.Then("Response contains the following custom attribute values:", ((string)(null)), table52, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table53.AddRow(new string[] {
                        "NumericType",
                        "invalid_value"});
#line 400
testRunner.When("I set the following custom attribute values for device \'chudo.{guid}\' as follows:" +
                    "", ((string)(null)), table53, "When ");
#line 403
testRunner.Then("Public API response is \'errorCode: 2056\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Setting and resetting boolean custom attribute")]
        public virtual void SettingAndResettingBooleanCustomAttribute()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Setting and resetting boolean custom attribute", ((string[])(null)));
#line 405
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 406
testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type",
                        "EnumValues"});
            table54.AddRow(new string[] {
                        "StringType",
                        "String",
                        "{null}"});
            table54.AddRow(new string[] {
                        "NumericType",
                        "Numeric",
                        "{null}"});
            table54.AddRow(new string[] {
                        "BoolType",
                        "Bool",
                        "{null}"});
            table54.AddRow(new string[] {
                        "DateType",
                        "Date",
                        "{null}"});
            table54.AddRow(new string[] {
                        "EnumType",
                        "Enum",
                        "One,Two,Three"});
#line 407
testRunner.And("I have the following custom attribute types:", ((string)(null)), table54, "And ");
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceName",
                        "RuleName",
                        "LdapConnection",
                        "LdapUserName",
                        "LdapUserPassword",
                        "DeviceId"});
            table55.AddRow(new string[] {
                        "autogenerate gg.{guid}",
                        "{iosrule_soti.net}",
                        "{soti.net}",
                        "testuser2",
                        "Bonjour321",
                        "autogenerate chudo.{guid}"});
#line 414
testRunner.And("I enrolled Ios Device with properties as follows:", ((string)(null)), table55, "And ");
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table56.AddRow(new string[] {
                        "BoolType",
                        "true"});
#line 417
testRunner.When("I set the following custom attribute values for device \'chudo.{guid}\' as follows:" +
                    "", ((string)(null)), table56, "When ");
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId"});
            table57.AddRow(new string[] {
                        "chudo.{guid}"});
#line 420
testRunner.When("I get custom attributes for the device:", ((string)(null)), table57, "When ");
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table58.AddRow(new string[] {
                        "StringType",
                        "{null}"});
            table58.AddRow(new string[] {
                        "NumericType",
                        "{null}"});
            table58.AddRow(new string[] {
                        "BoolType",
                        "true"});
            table58.AddRow(new string[] {
                        "DateType",
                        "{null}"});
            table58.AddRow(new string[] {
                        "EnumType",
                        "{null}"});
#line 423
testRunner.Then("Response contains the following custom attribute values:", ((string)(null)), table58, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table59.AddRow(new string[] {
                        "BoolType",
                        "false"});
#line 430
testRunner.When("I set the following custom attribute values for device \'chudo.{guid}\' as follows:" +
                    "", ((string)(null)), table59, "When ");
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId"});
            table60.AddRow(new string[] {
                        "chudo.{guid}"});
#line 433
testRunner.When("I get custom attributes for the device:", ((string)(null)), table60, "When ");
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table61.AddRow(new string[] {
                        "StringType",
                        "{null}"});
            table61.AddRow(new string[] {
                        "NumericType",
                        "{null}"});
            table61.AddRow(new string[] {
                        "BoolType",
                        "false"});
            table61.AddRow(new string[] {
                        "DateType",
                        "{null}"});
            table61.AddRow(new string[] {
                        "EnumType",
                        "{null}"});
#line 436
testRunner.Then("Response contains the following custom attribute values:", ((string)(null)), table61, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table62.AddRow(new string[] {
                        "BoolType",
                        "{null}"});
#line 443
testRunner.When("I set the following custom attribute values for device \'chudo.{guid}\' as follows:" +
                    "", ((string)(null)), table62, "When ");
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId"});
            table63.AddRow(new string[] {
                        "chudo.{guid}"});
#line 446
testRunner.When("I get custom attributes for the device:", ((string)(null)), table63, "When ");
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table64.AddRow(new string[] {
                        "StringType",
                        "{null}"});
            table64.AddRow(new string[] {
                        "NumericType",
                        "{null}"});
            table64.AddRow(new string[] {
                        "BoolType",
                        "{null}"});
            table64.AddRow(new string[] {
                        "DateType",
                        "{null}"});
            table64.AddRow(new string[] {
                        "EnumType",
                        "{null}"});
#line 449
testRunner.Then("Response contains the following custom attribute values:", ((string)(null)), table64, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table65.AddRow(new string[] {
                        "NumericType",
                        "invalid_value"});
#line 456
testRunner.When("I set the following custom attribute values for device \'chudo.{guid}\' as follows:" +
                    "", ((string)(null)), table65, "When ");
#line 459
testRunner.Then("Public API response is \'errorCode: 2056\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Setting and resetting date custom attribute")]
        public virtual void SettingAndResettingDateCustomAttribute()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Setting and resetting date custom attribute", ((string[])(null)));
#line 461
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 462
testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type",
                        "EnumValues"});
            table66.AddRow(new string[] {
                        "StringType",
                        "String",
                        "{null}"});
            table66.AddRow(new string[] {
                        "NumericType",
                        "Numeric",
                        "{null}"});
            table66.AddRow(new string[] {
                        "BoolType",
                        "Bool",
                        "{null}"});
            table66.AddRow(new string[] {
                        "DateType",
                        "Date",
                        "{null}"});
            table66.AddRow(new string[] {
                        "EnumType",
                        "Enum",
                        "One,Two,Three"});
#line 463
testRunner.And("I have the following custom attribute types:", ((string)(null)), table66, "And ");
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceName",
                        "RuleName",
                        "LdapConnection",
                        "LdapUserName",
                        "LdapUserPassword",
                        "DeviceId"});
            table67.AddRow(new string[] {
                        "autogenerate gg.{guid}",
                        "{iosrule_soti.net}",
                        "{soti.net}",
                        "testuser2",
                        "Bonjour321",
                        "autogenerate chudo.{guid}"});
#line 470
testRunner.And("I enrolled Ios Device with properties as follows:", ((string)(null)), table67, "And ");
#line hidden
            TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table68.AddRow(new string[] {
                        "DateType",
                        "2011-11-11"});
#line 473
testRunner.When("I set the following custom attribute values for device \'chudo.{guid}\' as follows:" +
                    "", ((string)(null)), table68, "When ");
#line hidden
            TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId"});
            table69.AddRow(new string[] {
                        "chudo.{guid}"});
#line 476
testRunner.When("I get custom attributes for the device:", ((string)(null)), table69, "When ");
#line hidden
            TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table70.AddRow(new string[] {
                        "StringType",
                        "{null}"});
            table70.AddRow(new string[] {
                        "NumericType",
                        "{null}"});
            table70.AddRow(new string[] {
                        "BoolType",
                        "{null}"});
            table70.AddRow(new string[] {
                        "DateType",
                        "2011-11-11"});
            table70.AddRow(new string[] {
                        "EnumType",
                        "{null}"});
#line 479
testRunner.Then("Response contains the following custom attribute values:", ((string)(null)), table70, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table71.AddRow(new string[] {
                        "DateType",
                        "2012-12-12"});
#line 486
testRunner.When("I set the following custom attribute values for device \'chudo.{guid}\' as follows:" +
                    "", ((string)(null)), table71, "When ");
#line hidden
            TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId"});
            table72.AddRow(new string[] {
                        "chudo.{guid}"});
#line 489
testRunner.When("I get custom attributes for the device:", ((string)(null)), table72, "When ");
#line hidden
            TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table73.AddRow(new string[] {
                        "StringType",
                        "{null}"});
            table73.AddRow(new string[] {
                        "NumericType",
                        "{null}"});
            table73.AddRow(new string[] {
                        "BoolType",
                        "{null}"});
            table73.AddRow(new string[] {
                        "DateType",
                        "2012-12-12"});
            table73.AddRow(new string[] {
                        "EnumType",
                        "{null}"});
#line 492
testRunner.Then("Response contains the following custom attribute values:", ((string)(null)), table73, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table74.AddRow(new string[] {
                        "DateType",
                        "{null}"});
#line 499
testRunner.When("I set the following custom attribute values for device \'chudo.{guid}\' as follows:" +
                    "", ((string)(null)), table74, "When ");
#line hidden
            TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId"});
            table75.AddRow(new string[] {
                        "chudo.{guid}"});
#line 502
testRunner.When("I get custom attributes for the device:", ((string)(null)), table75, "When ");
#line hidden
            TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table76.AddRow(new string[] {
                        "StringType",
                        "{null}"});
            table76.AddRow(new string[] {
                        "NumericType",
                        "{null}"});
            table76.AddRow(new string[] {
                        "BoolType",
                        "{null}"});
            table76.AddRow(new string[] {
                        "DateType",
                        "{null}"});
            table76.AddRow(new string[] {
                        "EnumType",
                        "{null}"});
#line 505
testRunner.Then("Response contains the following custom attribute values:", ((string)(null)), table76, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table77.AddRow(new string[] {
                        "NumericType",
                        "invalid_value"});
#line 512
testRunner.When("I set the following custom attribute values for device \'chudo.{guid}\' as follows:" +
                    "", ((string)(null)), table77, "When ");
#line 515
testRunner.Then("Public API response is \'errorCode: 2056\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Setting and resetting enum custom attribute")]
        public virtual void SettingAndResettingEnumCustomAttribute()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Setting and resetting enum custom attribute", ((string[])(null)));
#line 517
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 518
testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type",
                        "EnumValues"});
            table78.AddRow(new string[] {
                        "StringType",
                        "String",
                        "{null}"});
            table78.AddRow(new string[] {
                        "NumericType",
                        "Numeric",
                        "{null}"});
            table78.AddRow(new string[] {
                        "BoolType",
                        "Bool",
                        "{null}"});
            table78.AddRow(new string[] {
                        "DateType",
                        "Date",
                        "{null}"});
            table78.AddRow(new string[] {
                        "EnumType",
                        "Enum",
                        "One,Two,Three"});
#line 519
testRunner.And("I have the following custom attribute types:", ((string)(null)), table78, "And ");
#line hidden
            TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceName",
                        "RuleName",
                        "LdapConnection",
                        "LdapUserName",
                        "LdapUserPassword",
                        "DeviceId"});
            table79.AddRow(new string[] {
                        "autogenerate gg.{guid}",
                        "{iosrule_soti.net}",
                        "{soti.net}",
                        "testuser2",
                        "Bonjour321",
                        "autogenerate chudo.{guid}"});
#line 526
testRunner.And("I enrolled Ios Device with properties as follows:", ((string)(null)), table79, "And ");
#line hidden
            TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table80.AddRow(new string[] {
                        "EnumType",
                        "One"});
#line 529
testRunner.When("I set the following custom attribute values for device \'chudo.{guid}\' as follows:" +
                    "", ((string)(null)), table80, "When ");
#line hidden
            TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId"});
            table81.AddRow(new string[] {
                        "chudo.{guid}"});
#line 532
testRunner.When("I get custom attributes for the device:", ((string)(null)), table81, "When ");
#line hidden
            TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table82.AddRow(new string[] {
                        "StringType",
                        "{null}"});
            table82.AddRow(new string[] {
                        "NumericType",
                        "{null}"});
            table82.AddRow(new string[] {
                        "BoolType",
                        "{null}"});
            table82.AddRow(new string[] {
                        "DateType",
                        "{null}"});
            table82.AddRow(new string[] {
                        "EnumType",
                        "One"});
#line 535
testRunner.Then("Response contains the following custom attribute values:", ((string)(null)), table82, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table83.AddRow(new string[] {
                        "EnumType",
                        "Two"});
#line 542
testRunner.When("I set the following custom attribute values for device \'chudo.{guid}\' as follows:" +
                    "", ((string)(null)), table83, "When ");
#line hidden
            TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId"});
            table84.AddRow(new string[] {
                        "chudo.{guid}"});
#line 545
testRunner.When("I get custom attributes for the device:", ((string)(null)), table84, "When ");
#line hidden
            TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table85.AddRow(new string[] {
                        "StringType",
                        "{null}"});
            table85.AddRow(new string[] {
                        "NumericType",
                        "{null}"});
            table85.AddRow(new string[] {
                        "BoolType",
                        "{null}"});
            table85.AddRow(new string[] {
                        "DateType",
                        "{null}"});
            table85.AddRow(new string[] {
                        "EnumType",
                        "Two"});
#line 548
testRunner.Then("Response contains the following custom attribute values:", ((string)(null)), table85, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table86.AddRow(new string[] {
                        "EnumType",
                        "{null}"});
#line 555
testRunner.When("I set the following custom attribute values for device \'chudo.{guid}\' as follows:" +
                    "", ((string)(null)), table86, "When ");
#line hidden
            TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId"});
            table87.AddRow(new string[] {
                        "chudo.{guid}"});
#line 558
testRunner.When("I get custom attributes for the device:", ((string)(null)), table87, "When ");
#line hidden
            TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table88.AddRow(new string[] {
                        "StringType",
                        "{null}"});
            table88.AddRow(new string[] {
                        "NumericType",
                        "{null}"});
            table88.AddRow(new string[] {
                        "BoolType",
                        "{null}"});
            table88.AddRow(new string[] {
                        "DateType",
                        "{null}"});
            table88.AddRow(new string[] {
                        "EnumType",
                        "{null}"});
#line 561
testRunner.Then("Response contains the following custom attribute values:", ((string)(null)), table88, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table89.AddRow(new string[] {
                        "NumericType",
                        "invalid_value"});
#line 568
testRunner.When("I set the following custom attribute values for device \'chudo.{guid}\' as follows:" +
                    "", ((string)(null)), table89, "When ");
#line 571
testRunner.Then("Public API response is \'errorCode: 2056\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Set nonexisting custom attribute")]
        public virtual void SetNonexistingCustomAttribute()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Set nonexisting custom attribute", ((string[])(null)));
#line 573
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 574
testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceName",
                        "RuleName",
                        "LdapConnection",
                        "LdapUserName",
                        "LdapUserPassword",
                        "DeviceId"});
            table90.AddRow(new string[] {
                        "autogenerate gg.{guid}",
                        "{iosrule_soti.net}",
                        "{soti.net}",
                        "testuser2",
                        "Bonjour321",
                        "autogenerate chudo.{guid}"});
#line 575
testRunner.And("I enrolled Ios Device with properties as follows:", ((string)(null)), table90, "And ");
#line hidden
            TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table91.AddRow(new string[] {
                        "NonexistingType",
                        "One"});
#line 578
testRunner.When("I set the following custom attribute values for device \'chudo.{guid}\' as follows:" +
                    "", ((string)(null)), table91, "When ");
#line 581
testRunner.Then("Public API response is \'errorCode: 2055\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
