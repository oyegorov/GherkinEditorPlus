// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Soti.MobiControl.Bdd.PublicApiTests.Features.PublicAPI.DeviceAdministration
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DeviceProfiles")]
    public partial class DeviceProfilesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DeviceProfiles.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DeviceProfiles", "Operation related to retrieving the list of profiles that\r\nare currently assigned" +
                    " to a given device.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line 6
 testRunner.Given("I am a client of Public API with name \'ApiClient\' and secret \'ClientSecret\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.And("I make calls to Public API on behalf of user \'Administrator\' with password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Assigned profile appears as a device profile")]
        public virtual void AssignedProfileAppearsAsADeviceProfile()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assigned profile appears as a device profile", ((string[])(null)));
#line 9
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 10
 testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Kind",
                        "Icon",
                        "Path"});
            table1.AddRow(new string[] {
                        "autogenerate devicegroup1.{guid}",
                        "Regular",
                        "Yellow",
                        "\\\\My Company\\devicegroup1.{guid}"});
#line 11
 testRunner.Given("I have created a device group with properties as follows:", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "DeviceFamily",
                        "TargetGroups",
                        "LdapConnection"});
            table2.AddRow(new string[] {
                        "autogenerate {guid}.RuleName1",
                        "Ios",
                        "\\\\My Company\\devicegroup1.{guid}",
                        "{soti.net}"});
#line 14
 testRunner.And("I have created a rule as follows:", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceName",
                        "RuleName",
                        "LdapUserName",
                        "LdapUserPassword",
                        "DeviceId",
                        "OSVersion"});
            table3.AddRow(new string[] {
                        "autogenerate deviceId01.{guid}",
                        "{guid}.RuleName1",
                        "testuser2",
                        "Bonjour321",
                        "deviceId01.{guid}",
                        "9.0"});
#line 17
 testRunner.And("I have enrolled Ios Devices with properties as follows:", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReferenceId"});
            table4.AddRow(new string[] {
                        "autogenerate profileId01.{guid}"});
#line 20
 testRunner.When("I create a profile for iOS with wifi payload and identifier as follows", ((string)(null)), table4, "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "OptionName",
                        "OptionValue"});
            table5.AddRow(new string[] {
                        "NetworkRestriction",
                        "AnyNetwork"});
#line 23
 testRunner.And("I assign this profile to path \'\\\\My Company\\devicegroup1.{guid}\' with options as " +
                    "follows", ((string)(null)), table5, "And ");
#line 26
 testRunner.Then("The identifier for the profile assosciated to the device with deviceId of \'device" +
                    "Id01.{guid}\' should be \'profileId01.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Getting newly assigned device profile status")]
        public virtual void GettingNewlyAssignedDeviceProfileStatus()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Getting newly assigned device profile status", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 29
 testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Kind",
                        "Icon",
                        "Path"});
            table6.AddRow(new string[] {
                        "autogenerate devicegroup2.{guid}",
                        "Regular",
                        "Yellow",
                        "\\\\My Company\\devicegroup2.{guid}"});
#line 30
 testRunner.Given("I have created a device group with properties as follows:", ((string)(null)), table6, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "DeviceFamily",
                        "TargetGroups",
                        "LdapConnection"});
            table7.AddRow(new string[] {
                        "autogenerate {guid}.RuleName2",
                        "Ios",
                        "\\\\My Company\\devicegroup2.{guid}",
                        "{soti.net}"});
#line 33
 testRunner.And("I have created a rule as follows:", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceName",
                        "RuleName",
                        "LdapConnection",
                        "LdapUserName",
                        "LdapUserPassword",
                        "DeviceId",
                        "OSVersion"});
            table8.AddRow(new string[] {
                        "autogenerate deviceId02.{guid}",
                        "{guid}.RuleName2",
                        "{soti.net}",
                        "testuser2",
                        "Bonjour321",
                        "deviceId02.{guid}",
                        "9.0"});
#line 36
 testRunner.And("I have enrolled Ios Devices with properties as follows:", ((string)(null)), table8, "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReferenceId"});
            table9.AddRow(new string[] {
                        "autogenerate profileId02.{guid}"});
#line 39
 testRunner.When("I create a profile for iOS with wifi payload and identifier as follows", ((string)(null)), table9, "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "OptionName",
                        "OptionValue"});
            table10.AddRow(new string[] {
                        "NetworkRestriction",
                        "AnyNetwork"});
#line 42
 testRunner.And("I assign this profile to path \'\\\\My Company\\devicegroup2.{guid}\' with options as " +
                    "follows", ((string)(null)), table10, "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Status",
                        "DeviceId",
                        "ProfileId"});
            table11.AddRow(new string[] {
                        "NotInstalled",
                        "deviceId02.{guid}",
                        "profileId02.{guid}"});
#line 45
 testRunner.Then("Device profile statuses should be as follows:", ((string)(null)), table11, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Getting revoked device profile returns not administratively revoked status")]
        public virtual void GettingRevokedDeviceProfileReturnsNotAdministrativelyRevokedStatus()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Getting revoked device profile returns not administratively revoked status", ((string[])(null)));
#line 49
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 50
 testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Kind",
                        "Icon",
                        "Path"});
            table12.AddRow(new string[] {
                        "autogenerate devicegroup3.{guid}",
                        "Regular",
                        "Yellow",
                        "\\\\My Company\\devicegroup3.{guid}"});
#line 51
 testRunner.Given("I have created a device group with properties as follows:", ((string)(null)), table12, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "DeviceFamily",
                        "TargetGroups",
                        "LdapConnection"});
            table13.AddRow(new string[] {
                        "autogenerate {guid}.RuleName3",
                        "Ios",
                        "\\\\My Company\\devicegroup3.{guid}",
                        "{soti.net}"});
#line 54
 testRunner.And("I have created a rule as follows:", ((string)(null)), table13, "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceName",
                        "RuleName",
                        "LdapConnection",
                        "LdapUserName",
                        "LdapUserPassword",
                        "DeviceId",
                        "OSVersion"});
            table14.AddRow(new string[] {
                        "autogenerate deviceId03.{guid}",
                        "{guid}.RuleName3",
                        "{soti.net}",
                        "testuser2",
                        "Bonjour321",
                        "deviceId03.{guid}",
                        "9.0"});
#line 57
 testRunner.And("I have enrolled Ios Devices with properties as follows:", ((string)(null)), table14, "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReferenceId"});
            table15.AddRow(new string[] {
                        "autogenerate profileId03.{guid}"});
#line 60
 testRunner.When("I create a profile for iOS with wifi payload and identifier as follows", ((string)(null)), table15, "When ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "OptionName",
                        "OptionValue"});
            table16.AddRow(new string[] {
                        "NetworkRestriction",
                        "AnyNetwork"});
#line 63
 testRunner.And("I assign this profile to path \'\\\\My Company\\devicegroup3.{guid}\' with options as " +
                    "follows", ((string)(null)), table16, "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Status",
                        "DeviceId",
                        "ProfileId"});
            table17.AddRow(new string[] {
                        "NotInstalled",
                        "deviceId03.{guid}",
                        "profileId03.{guid}"});
#line 66
 testRunner.Then("Device profile statuses should be as follows:", ((string)(null)), table17, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Action",
                        "DeviceId",
                        "ProfileId"});
            table18.AddRow(new string[] {
                        "Revoke",
                        "deviceId03.{guid}",
                        "profileId03.{guid}"});
#line 69
 testRunner.When("I execute a device profile action with options as follows:", ((string)(null)), table18, "When ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Status",
                        "DeviceId",
                        "ProfileId"});
            table19.AddRow(new string[] {
                        "AdministrativelyRemoved",
                        "deviceId03.{guid}",
                        "profileId03.{guid}"});
#line 72
 testRunner.Then("Device profile statuses should be as follows:", ((string)(null)), table19, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test actions properly administered")]
        [NUnit.Framework.TestCaseAttribute("InstallPending", "AdministrativelyRemoved", "deviceId05.{guid}", "profileId04.{guid}", "rofileId05.{guid}", "Install", "Revoke", null)]
        [NUnit.Framework.TestCaseAttribute("InstallPending", "InstallPending", "deviceId05.{guid}", "profileId04.{guid}", "profileId05.{guid}", "Install", "Install", null)]
        [NUnit.Framework.TestCaseAttribute("AdministrativelyRemoved", "AdministrativelyRemoved", "deviceId05.{guid}", "profileId04.{guid}", "profileId05.{guid}", "Revoke", "Revoke", null)]
        public virtual void TestActionsProperlyAdministered(string status1, string status2, string deviceId, string profileId1, string profileId2, string action1, string action2, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test actions properly administered", exampleTags);
#line 76
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 77
 testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Kind",
                        "Icon",
                        "Path"});
            table20.AddRow(new string[] {
                        "autogenerate devicegroup4.{guid}",
                        "Regular",
                        "Yellow",
                        "\\\\My Company\\devicegroup4.{guid}"});
#line 78
 testRunner.Given("I have created a device group with properties as follows:", ((string)(null)), table20, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "DeviceFamily",
                        "TargetGroups",
                        "LdapConnection"});
            table21.AddRow(new string[] {
                        "autogenerate {guid}.RuleName4",
                        "Ios",
                        "\\\\My Company\\devicegroup4.{guid}",
                        "{soti.net}"});
#line 81
 testRunner.And("I have created a rule as follows:", ((string)(null)), table21, "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceName",
                        "RuleName",
                        "LdapConnection",
                        "LdapUserName",
                        "LdapUserPassword",
                        "DeviceId",
                        "OSVersion"});
            table22.AddRow(new string[] {
                        "autogenerate deviceId05.{guid}",
                        "{guid}.RuleName4",
                        "{soti.net}",
                        "testuser2",
                        "Bonjour321",
                        "deviceId05.{guid}",
                        "9.0"});
#line 84
 testRunner.And("I have enrolled Ios Devices with properties as follows:", ((string)(null)), table22, "And ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReferenceId"});
            table23.AddRow(new string[] {
                        string.Format("autogenerate {0}", profileId1)});
#line 87
 testRunner.When("I create a profile for iOS with wifi payload and identifier as follows", ((string)(null)), table23, "When ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "OptionName",
                        "OptionValue"});
            table24.AddRow(new string[] {
                        "NetworkRestriction",
                        "AnyNetwork"});
#line 90
 testRunner.And("I assign this profile to path \'\\\\My Company\\devicegroup4.{guid}\' with options as " +
                    "follows", ((string)(null)), table24, "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReferenceId"});
            table25.AddRow(new string[] {
                        string.Format("autogenerate {0}", profileId2)});
#line 93
 testRunner.And("I create a profile for iOS with wifi payload and identifier as follows", ((string)(null)), table25, "And ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "OptionName",
                        "OptionValue"});
            table26.AddRow(new string[] {
                        "NetworkRestriction",
                        "AnyNetwork"});
#line 96
 testRunner.And("I assign this profile to path \'\\\\My Company\\devicegroup4.{guid}\' with options as " +
                    "follows", ((string)(null)), table26, "And ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Action",
                        "DeviceId",
                        "ProfileId"});
            table27.AddRow(new string[] {
                        string.Format("{0}", action1),
                        "deviceId05.{guid}",
                        string.Format("{0}", profileId1)});
            table27.AddRow(new string[] {
                        string.Format("{0}", action2),
                        "deviceId05.{guid}",
                        string.Format("{0}", profileId2)});
#line 99
 testRunner.When("I execute a device profile action with options as follows:", ((string)(null)), table27, "When ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Status",
                        "DeviceId",
                        "ProfileId"});
            table28.AddRow(new string[] {
                        string.Format("{0}", status1),
                        string.Format("{0}", deviceId),
                        string.Format("{0}", profileId1)});
            table28.AddRow(new string[] {
                        string.Format("{0}", status2),
                        string.Format("{0}", deviceId),
                        string.Format("{0}", profileId2)});
#line 103
 testRunner.Then("Device profile statuses should be as follows:", ((string)(null)), table28, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
