// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Soti.MobiControl.Bdd.PublicApiTests.Features.PublicAPI.DeviceAdministration
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("API Security Permissions")]
    public partial class APISecurityPermissionsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ApiSecurityPermissions.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "API Security Permissions", "Making sure that specific permissions work\r\nwith their corresponding APIs", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line 6
 testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.And("Execute once per feature STARTED", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 8
 testRunner.And("I have enabled LDAP integration for LDAP connection \'{sotiqa}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "PrincipalType",
                        "Name",
                        "DisplayName",
                        "DomainName",
                        "LdapConnectionName",
                        "MemberOf"});
            table1.AddRow(new string[] {
                        "ActiveDirectoryUser",
                        "SSPUser",
                        "SSP1",
                        "SOTIQA",
                        "{sotiqa}",
                        "MobiControl Administrators"});
#line 9
 testRunner.And("I have created principals as follows:", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceName",
                        "RuleName",
                        "LdapConnection",
                        "LdapUserName",
                        "LdapUserPassword",
                        "DeviceId"});
            table2.AddRow(new string[] {
                        "autogenerate IosSimulator.{guid}",
                        "{iosrule_sotiqa}",
                        "{sotiqa}",
                        "SSPUser",
                        "Welcome1234",
                        "autogenerate deviceId.{guid}"});
#line 12
 testRunner.And("I have enrolled Ios Devices with properties as follows (execute once):", ((string)(null)), table2, "And ");
#line 15
 testRunner.And("Execute once per feature ENDED", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("LockDevice permission")]
        [NUnit.Framework.CategoryAttribute("CarryOverScenarioContext")]
        [NUnit.Framework.TestCaseAttribute("SSPUser", "true", "SSPUser", "Welcome1234", "ssp", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("SSPUser", "false", "SSPUser", "Welcome1234", "ssp", "Unauthorized access", null)]
        public virtual void LockDevicePermission(string permissionTo, string isAllowed, string loginUser, string loginPwd, string loginRole, string result, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CarryOverScenarioContext"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("LockDevice permission", @__tags);
#line 19
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 20
 testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityRole",
                        "PermissionType",
                        "PermissionName",
                        "IsAllowed"});
            table3.AddRow(new string[] {
                        "DeviceOwner",
                        "Feature",
                        "LoginSSP",
                        "true"});
            table3.AddRow(new string[] {
                        "DeviceOwner",
                        "Device",
                        "Lock",
                        string.Format("{0}", isAllowed)});
#line 21
 testRunner.And(string.Format("I have granted principal \'{0}\' the permissions as follows:", permissionTo), ((string)(null)), table3, "And ");
#line 25
 testRunner.When(string.Format("I am a user with name \'{0}\' and password \'{1}\' and role \'{2}\'", loginUser, loginPwd, loginRole), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceIdentity.Id",
                        "DeviceIdentity.DevicePropertyIdType",
                        "PhoneNumber",
                        "Message"});
            table4.AddRow(new string[] {
                        "deviceId.{guid}",
                        "DeviceId",
                        "34523415435",
                        "Hello World!"});
#line 26
 testRunner.And("I call Public API function LockDevice using request with properties as follows:", ((string)(null)), table4, "And ");
#line 29
 testRunner.Then(string.Format("Public API response is \'{0}\'", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("WipeDevice permission")]
        [NUnit.Framework.CategoryAttribute("CarryOverScenarioContext")]
        [NUnit.Framework.TestCaseAttribute("SSPUser", "true", "SSPUser", "Welcome1234", "ssp", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("SSPUser", "false", "SSPUser", "Welcome1234", "ssp", "Unauthorized access", null)]
        public virtual void WipeDevicePermission(string permissionTo, string isAllowed, string loginUser, string loginPwd, string loginRole, string result, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CarryOverScenarioContext"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("WipeDevice permission", @__tags);
#line 37
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 38
 testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityRole",
                        "PermissionType",
                        "PermissionName",
                        "IsAllowed"});
            table5.AddRow(new string[] {
                        "DeviceOwner",
                        "Feature",
                        "LoginSSP",
                        "true"});
            table5.AddRow(new string[] {
                        "DeviceOwner",
                        "Device",
                        "Wipe",
                        string.Format("{0}", isAllowed)});
#line 39
 testRunner.And(string.Format("I have granted principal \'{0}\' the permissions as follows:", permissionTo), ((string)(null)), table5, "And ");
#line 43
 testRunner.When(string.Format("I am a user with name \'{0}\' and password \'{1}\' and role \'{2}\'", loginUser, loginPwd, loginRole), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceIdentity.Id",
                        "DeviceIdentity.DevicePropertyIdType"});
            table6.AddRow(new string[] {
                        "deviceId.{guid}",
                        "DeviceId"});
#line 44
 testRunner.And("I call Public API function WipeDevice using request with properties as follows:", ((string)(null)), table6, "And ");
#line 47
 testRunner.Then(string.Format("Public API response is \'{0}\'", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("UnenrollDevice permission")]
        [NUnit.Framework.CategoryAttribute("CarryOverScenarioContext")]
        [NUnit.Framework.TestCaseAttribute("SSPUser", "true", "SSPUser", "Welcome1234", "ssp", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("SSPUser", "false", "SSPUser", "Welcome1234", "ssp", "Unauthorized access", null)]
        public virtual void UnenrollDevicePermission(string permissionTo, string isAllowed, string loginUser, string loginPwd, string loginRole, string result, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CarryOverScenarioContext"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("UnenrollDevice permission", @__tags);
#line 55
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 56
 testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityRole",
                        "PermissionType",
                        "PermissionName",
                        "IsAllowed"});
            table7.AddRow(new string[] {
                        "DeviceOwner",
                        "Feature",
                        "LoginSSP",
                        "true"});
            table7.AddRow(new string[] {
                        "DeviceOwner",
                        "Device",
                        "Unenroll",
                        string.Format("{0}", isAllowed)});
#line 57
 testRunner.And(string.Format("I have granted principal \'{0}\' the permissions as follows:", permissionTo), ((string)(null)), table7, "And ");
#line 61
 testRunner.When(string.Format("I am a user with name \'{0}\' and password \'{1}\' and role \'{2}\'", loginUser, loginPwd, loginRole), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceIdentity.Id",
                        "DeviceIdentity.DevicePropertyIdType"});
            table8.AddRow(new string[] {
                        "deviceId.{guid}",
                        "DeviceId"});
#line 62
 testRunner.And("I call Public API function UnenrollDevice using request with properties as follow" +
                    "s:", ((string)(null)), table8, "And ");
#line 65
 testRunner.Then(string.Format("Public API response is \'{0}\'", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("SendMessage permission")]
        [NUnit.Framework.CategoryAttribute("CarryOverScenarioContext")]
        [NUnit.Framework.TestCaseAttribute("SSPUser", "true", "SSPUser", "Welcome1234", "ssp", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("SSPUser", "false", "SSPUser", "Welcome1234", "ssp", "Unauthorized access", null)]
        public virtual void SendMessagePermission(string permissionTo, string isAllowed, string loginUser, string loginPwd, string loginRole, string result, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CarryOverScenarioContext"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SendMessage permission", @__tags);
#line 73
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 74
 testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityRole",
                        "PermissionType",
                        "PermissionName",
                        "IsAllowed"});
            table9.AddRow(new string[] {
                        "DeviceOwner",
                        "Feature",
                        "LoginSSP",
                        "true"});
            table9.AddRow(new string[] {
                        "DeviceOwner",
                        "Device",
                        "SendMessage",
                        string.Format("{0}", isAllowed)});
#line 75
 testRunner.And(string.Format("I have granted principal \'{0}\' the permissions as follows:", permissionTo), ((string)(null)), table9, "And ");
#line 79
 testRunner.When(string.Format("I am a user with name \'{0}\' and password \'{1}\' and role \'{2}\'", loginUser, loginPwd, loginRole), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceIdentity.Id",
                        "DeviceIdentity.DevicePropertyIdType",
                        "Message"});
            table10.AddRow(new string[] {
                        "deviceId.{guid}",
                        "DeviceId",
                        "Hello World!"});
#line 80
 testRunner.And("I call Public API function SendMessage using request with properties as follows:", ((string)(null)), table10, "And ");
#line 83
 testRunner.Then(string.Format("Public API response is \'{0}\'", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("LocateDevice permission")]
        [NUnit.Framework.CategoryAttribute("CarryOverScenarioContext")]
        [NUnit.Framework.TestCaseAttribute("SSPUser", "true", "SSPUser", "Welcome1234", "ssp", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("SSPUser", "false", "SSPUser", "Welcome1234", "ssp", "Unauthorized access", null)]
        public virtual void LocateDevicePermission(string permissionTo, string isAllowed, string loginUser, string loginPwd, string loginRole, string result, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CarryOverScenarioContext"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("LocateDevice permission", @__tags);
#line 91
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 92
 testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityRole",
                        "PermissionType",
                        "PermissionName",
                        "IsAllowed"});
            table11.AddRow(new string[] {
                        "DeviceOwner",
                        "Feature",
                        "LoginSSP",
                        "true"});
            table11.AddRow(new string[] {
                        "DeviceOwner",
                        "Device",
                        "Locate",
                        string.Format("{0}", isAllowed)});
#line 93
 testRunner.And(string.Format("I have granted principal \'{0}\' the permissions as follows:", permissionTo), ((string)(null)), table11, "And ");
#line 97
 testRunner.When(string.Format("I am a user with name \'{0}\' and password \'{1}\' and role \'{2}\'", loginUser, loginPwd, loginRole), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceIdentity.Id",
                        "DeviceIdentity.DevicePropertyIdType"});
            table12.AddRow(new string[] {
                        "deviceId.{guid}",
                        "DeviceId"});
#line 98
 testRunner.And("I call Public API function LocateDevice using request with properties as follows:" +
                    "", ((string)(null)), table12, "And ");
#line 101
 testRunner.Then(string.Format("Public API response is \'{0}\'", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("SetPasscode permission")]
        [NUnit.Framework.CategoryAttribute("CarryOverScenarioContext")]
        [NUnit.Framework.TestCaseAttribute("SSPUser", "true", "SSPUser", "Welcome1234", "ssp", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("SSPUser", "false", "SSPUser", "Welcome1234", "ssp", "Unauthorized access", null)]
        public virtual void SetPasscodePermission(string permissionTo, string isAllowed, string loginUser, string loginPwd, string loginRole, string result, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CarryOverScenarioContext"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SetPasscode permission", @__tags);
#line 109
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 110
 testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityRole",
                        "PermissionType",
                        "PermissionName",
                        "IsAllowed"});
            table13.AddRow(new string[] {
                        "DeviceOwner",
                        "Feature",
                        "LoginSSP",
                        "true"});
            table13.AddRow(new string[] {
                        "DeviceOwner",
                        "Device",
                        "SetPasscode",
                        string.Format("{0}", isAllowed)});
#line 111
 testRunner.And(string.Format("I have granted principal \'{0}\' the permissions as follows:", permissionTo), ((string)(null)), table13, "And ");
#line 115
 testRunner.When(string.Format("I am a user with name \'{0}\' and password \'{1}\' and role \'{2}\'", loginUser, loginPwd, loginRole), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceIdentity.Id",
                        "DeviceIdentity.DevicePropertyIdType"});
            table14.AddRow(new string[] {
                        "deviceId.{guid}",
                        "DeviceId"});
#line 116
 testRunner.And("I call Public API function SetPasscode using request with properties as follows:", ((string)(null)), table14, "And ");
#line 119
 testRunner.Then(string.Format("Public API response is \'{0}\'", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CheckInDevice permission")]
        [NUnit.Framework.CategoryAttribute("CarryOverScenarioContext")]
        [NUnit.Framework.TestCaseAttribute("SSPUser", "true", "SSPUser", "Welcome1234", "ssp", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("SSPUser", "false", "SSPUser", "Welcome1234", "ssp", "Unauthorized access", null)]
        public virtual void CheckInDevicePermission(string permissionTo, string isAllowed, string loginUser, string loginPwd, string loginRole, string result, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CarryOverScenarioContext"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CheckInDevice permission", @__tags);
#line 127
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 128
 testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityRole",
                        "PermissionType",
                        "PermissionName",
                        "IsAllowed"});
            table15.AddRow(new string[] {
                        "DeviceOwner",
                        "Feature",
                        "LoginSSP",
                        "true"});
            table15.AddRow(new string[] {
                        "DeviceOwner",
                        "Device",
                        "CheckIn",
                        string.Format("{0}", isAllowed)});
#line 129
 testRunner.And(string.Format("I have granted principal \'{0}\' the permissions as follows:", permissionTo), ((string)(null)), table15, "And ");
#line 133
 testRunner.When(string.Format("I am a user with name \'{0}\' and password \'{1}\' and role \'{2}\'", loginUser, loginPwd, loginRole), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceIdentity.Id",
                        "DeviceIdentity.DevicePropertyIdType"});
            table16.AddRow(new string[] {
                        "deviceId.{guid}",
                        "DeviceId"});
#line 134
 testRunner.And("I call Public API function CheckInDevice using request with properties as follows" +
                    ":", ((string)(null)), table16, "And ");
#line 137
 testRunner.Then(string.Format("Public API response is \'{0}\'", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
