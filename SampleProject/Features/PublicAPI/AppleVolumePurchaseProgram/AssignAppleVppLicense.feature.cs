// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Soti.MobiControl.Bdd.PublicApiTests.Features.PublicAPI.AppleVolumePurchaseProgram
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Assign Apple Vpp License")]
    public partial class AssignAppleVppLicenseFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AssignAppleVppLicense.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Assign Apple Vpp License", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line 5
testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
testRunner.And("I have enabled LDAP integration for LDAP connection \'{sotiqa}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "PrincipalType",
                        "Name",
                        "DisplayName",
                        "DomainName",
                        "LdapConnectionName",
                        "MemberOf"});
            table1.AddRow(new string[] {
                        "ActiveDirectoryUser",
                        "Jon",
                        "Jon",
                        "SOTIQA",
                        "{sotiqa}",
                        "MobiControl Administrators"});
#line 7
testRunner.And("I have created principals as follows:", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceName",
                        "RuleName",
                        "LdapConnection",
                        "LdapUserName",
                        "LdapUserPassword",
                        "DeviceId",
                        "IsITunesStoreAccountActive",
                        "ITunesStoreAccountHash"});
            table2.AddRow(new string[] {
                        "autogenerate IosSimulatorDevice.{guid}",
                        "{iosrule_sotiqa}",
                        "{sotiqa}",
                        "Jon",
                        "Welcome1234",
                        "autogenerate deviceId.{guid}",
                        "True",
                        "autogenerate iTunes.{guid}"});
#line 10
testRunner.And("I enrolled Ios Device with properties as follows(execute once):", ((string)(null)), table2, "And ");
#line 13
testRunner.And("Using device simulator with ID \'deviceId.{guid}\' as current", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
testRunner.And("I have reset VppSimulator database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
testRunner.When(@"I call Public API function AppleVolumePurchaseProgramService\AddAccount to create a VPP account with description 'autogenerate VPPAccountName.{guid}', identifier 'autogenerate VPPAccountID.{guid}' and VPP token from 'file:\\storage\\qaShare\\BDD_IntegrationTests_Data\\AppleVolumePurchaseProgram\\vppsim.vpptoken'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Assign then revoke an Apple VPP licensed app in an App Catalog rule")]
        [NUnit.Framework.CategoryAttribute("CleanDatabaseForVpp")]
        [NUnit.Framework.CategoryAttribute("CarryOverScenarioContext")]
        [NUnit.Framework.TestCaseAttribute("AppleIdBased", null)]
        [NUnit.Framework.TestCaseAttribute("DeviceBased", null)]
        public virtual void AssignThenRevokeAnAppleVPPLicensedAppInAnAppCatalogRule(string vppAppAssignmentType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CleanDatabaseForVpp",
                    "CarryOverScenarioContext"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign then revoke an Apple VPP licensed app in an App Catalog rule", @__tags);
#line 20
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "IsDeviceAssignable"});
            table3.AddRow(new string[] {
                        "UserAssignableProduct",
                        "true"});
#line 21
 testRunner.Given("There exist Apple VPP products with available licenses in the Apple VPP Account w" +
                    "ith identifier \'VPPAccountID.{guid}\' with the following criteria:", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "IsInstalled"});
            table4.AddRow(new string[] {
                        "UserAssignableProduct",
                        "false"});
#line 24
 testRunner.And("The current iOS device has the following Apple VPP product statuses:", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "AssignmentType"});
            table5.AddRow(new string[] {
                        "UserAssignableProduct",
                        string.Format("{0}", vppAppAssignmentType)});
#line 27
 testRunner.And("I have created an App Catalog rule with name \'autogenerate AppCatalogRuleName.{gu" +
                    "id}\' with the following Apple VPP products targeting the current device:", ((string)(null)), table5, "And ");
#line 30
 testRunner.When(string.Format("I request the current iOS device to check in to install the \'{0}\' applications", vppAppAssignmentType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\RefreshAccount to re" +
                    "fresh a VPP account with identifier \'VPPAccountID.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "ChangeInNumberAssignedLicenses"});
            table6.AddRow(new string[] {
                        "UserAssignableProduct",
                        "1"});
#line 32
 testRunner.And("The number of assigned licenses for the Apple VPP products has changed as follows" +
                    ":", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "IsInstalled"});
            table7.AddRow(new string[] {
                        "UserAssignableProduct",
                        "true"});
#line 35
 testRunner.And("The current iOS device has the following Apple VPP product statuses:", ((string)(null)), table7, "And ");
#line 38
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\Reconcile to revoke " +
                    "unused licenses and retire unused users for all VPP accounts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\RefreshAccount to re" +
                    "fresh a VPP account with identifier \'VPPAccountID.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "ChangeInNumberAssignedLicenses"});
            table8.AddRow(new string[] {
                        "UserAssignableProduct",
                        "0"});
#line 40
 testRunner.And("The number of assigned licenses for the Apple VPP products has changed as follows" +
                    ":", ((string)(null)), table8, "And ");
#line 43
    testRunner.And("I delete the App Catalog rule named \'AppCatalogRuleName.{guid}\' and targeting the" +
                    " current device", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\Reconcile to revoke " +
                    "unused licenses and retire unused users for all VPP accounts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\RefreshAccount to re" +
                    "fresh a VPP account with identifier \'VPPAccountID.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "ChangeInNumberAssignedLicenses"});
            table9.AddRow(new string[] {
                        "UserAssignableProduct",
                        "-1"});
#line 46
 testRunner.And("The number of assigned licenses for the Apple VPP products has changed as follows" +
                    ":", ((string)(null)), table9, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Assign then revoke Apple VPP user-based and device-based licensed apps in an App " +
            "Catalog rule")]
        [NUnit.Framework.CategoryAttribute("CleanDatabaseForVpp")]
        [NUnit.Framework.CategoryAttribute("CarryOverScenarioContext")]
        public virtual void AssignThenRevokeAppleVPPUser_BasedAndDevice_BasedLicensedAppsInAnAppCatalogRule()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign then revoke Apple VPP user-based and device-based licensed apps in an App " +
                    "Catalog rule", new string[] {
                        "CleanDatabaseForVpp",
                        "CarryOverScenarioContext"});
#line 63
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "IsDeviceAssignable"});
            table10.AddRow(new string[] {
                        "UserAssignableProduct",
                        "true"});
            table10.AddRow(new string[] {
                        "DeviceAssignableProduct",
                        "true"});
#line 64
 testRunner.Given("There exist Apple VPP products with available licenses in the Apple VPP Account w" +
                    "ith identifier \'VPPAccountID.{guid}\' with the following criteria:", ((string)(null)), table10, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "IsInstalled"});
            table11.AddRow(new string[] {
                        "UserAssignableProduct",
                        "false"});
            table11.AddRow(new string[] {
                        "DeviceAssignableProduct",
                        "false"});
#line 68
 testRunner.And("The current iOS device has the following Apple VPP product statuses:", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "AssignmentType"});
            table12.AddRow(new string[] {
                        "UserAssignableProduct",
                        "AppleIdBased"});
            table12.AddRow(new string[] {
                        "DeviceAssignableProduct",
                        "DeviceBased"});
#line 72
 testRunner.And("I have created an App Catalog rule with name \'autogenerate AppCatalogRuleName.{gu" +
                    "id}\' with the following Apple VPP products targeting the current device:", ((string)(null)), table12, "And ");
#line 76
 testRunner.When("The current iOS device fully checks in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 77
 testRunner.Then("I call Public API function AppleVolumePurchaseProgramService\\RefreshAccount to re" +
                    "fresh a VPP account with identifier \'VPPAccountID.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "ChangeInNumberAssignedLicenses"});
            table13.AddRow(new string[] {
                        "UserAssignableProduct",
                        "0"});
            table13.AddRow(new string[] {
                        "DeviceAssignableProduct",
                        "1"});
#line 78
 testRunner.And("The number of assigned licenses for the Apple VPP products has changed as follows" +
                    ":", ((string)(null)), table13, "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "IsInstalled"});
            table14.AddRow(new string[] {
                        "UserAssignableProduct",
                        "false"});
            table14.AddRow(new string[] {
                        "DeviceAssignableProduct",
                        "true"});
#line 82
 testRunner.And("The current iOS device has the following Apple VPP product statuses:", ((string)(null)), table14, "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId"});
            table15.AddRow(new string[] {
                        "deviceId.{guid}"});
#line 86
 testRunner.Then("I associate all VPP users in the VPP simulator and update the iTunes ID hash for " +
                    "the following devices:", ((string)(null)), table15, "Then ");
#line 89
 testRunner.And("The current iOS device fully checks in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 90
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\RefreshAccount to re" +
                    "fresh a VPP account with identifier \'VPPAccountID.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "ChangeInNumberAssignedLicenses"});
            table16.AddRow(new string[] {
                        "UserAssignableProduct",
                        "1"});
            table16.AddRow(new string[] {
                        "DeviceAssignableProduct",
                        "0"});
#line 91
 testRunner.And("The number of assigned licenses for the Apple VPP products has changed as follows" +
                    ":", ((string)(null)), table16, "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "IsInstalled"});
            table17.AddRow(new string[] {
                        "UserAssignableProduct",
                        "true"});
            table17.AddRow(new string[] {
                        "DeviceAssignableProduct",
                        "true"});
#line 95
 testRunner.And("The current iOS device has the following Apple VPP product statuses:", ((string)(null)), table17, "And ");
#line 99
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\Reconcile to revoke " +
                    "unused licenses and retire unused users for all VPP accounts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 100
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\RefreshAccount to re" +
                    "fresh a VPP account with identifier \'VPPAccountID.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "ChangeInNumberAssignedLicenses"});
            table18.AddRow(new string[] {
                        "UserAssignableProduct",
                        "0"});
            table18.AddRow(new string[] {
                        "DeviceAssignableProduct",
                        "0"});
#line 101
 testRunner.And("The number of assigned licenses for the Apple VPP products has changed as follows" +
                    ":", ((string)(null)), table18, "And ");
#line 105
 testRunner.And("I delete the App Catalog rule named \'AppCatalogRuleName.{guid}\' and targeting the" +
                    " current device", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 106
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\Reconcile to revoke " +
                    "unused licenses and retire unused users for all VPP accounts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 107
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\RefreshAccount to re" +
                    "fresh a VPP account with identifier \'VPPAccountID.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "ChangeInNumberAssignedLicenses"});
            table19.AddRow(new string[] {
                        "UserAssignableProduct",
                        "-1"});
            table19.AddRow(new string[] {
                        "DeviceAssignableProduct",
                        "-1"});
#line 108
 testRunner.And("The number of assigned licenses for the Apple VPP products has changed as follows" +
                    ":", ((string)(null)), table19, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert an app in an App Catalog rule from one Apple VPP assignment type licensed" +
            " app to another")]
        [NUnit.Framework.CategoryAttribute("CleanDatabaseForVpp")]
        [NUnit.Framework.CategoryAttribute("CarryOverScenarioContext")]
        [NUnit.Framework.TestCaseAttribute("AppleIdBased", "DeviceBased", null)]
        [NUnit.Framework.TestCaseAttribute("DeviceBased", "AppleIdBased", null)]
        public virtual void ConvertAnAppInAnAppCatalogRuleFromOneAppleVPPAssignmentTypeLicensedAppToAnother(string fromAssignmentType, string toAssignmentType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CleanDatabaseForVpp",
                    "CarryOverScenarioContext"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert an app in an App Catalog rule from one Apple VPP assignment type licensed" +
                    " app to another", @__tags);
#line 120
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "IsDeviceAssignable"});
            table20.AddRow(new string[] {
                        "UserAndDeviceAssignableProduct",
                        "true"});
#line 121
 testRunner.Given("There exist Apple VPP products with available licenses in the Apple VPP Account w" +
                    "ith identifier \'VPPAccountID.{guid}\' with the following criteria:", ((string)(null)), table20, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "IsInstalled"});
            table21.AddRow(new string[] {
                        "UserAndDeviceAssignableProduct",
                        "false"});
#line 124
 testRunner.And("The current iOS device has the following Apple VPP product statuses:", ((string)(null)), table21, "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "AssignmentType"});
            table22.AddRow(new string[] {
                        "UserAndDeviceAssignableProduct",
                        string.Format("{0}", fromAssignmentType)});
#line 127
 testRunner.And("I have created an App Catalog rule with name \'autogenerate AppCatalogRuleName.{gu" +
                    "id}\' with the following Apple VPP products targeting the current device:", ((string)(null)), table22, "And ");
#line 130
 testRunner.And(string.Format("I request the current iOS device to check in to install the \'{0}\' applications", fromAssignmentType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 131
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\RefreshAccount to re" +
                    "fresh a VPP account with identifier \'VPPAccountID.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "ChangeInNumberAssignedLicenses"});
            table23.AddRow(new string[] {
                        "UserAndDeviceAssignableProduct",
                        "1"});
#line 132
 testRunner.And("The number of assigned licenses for the Apple VPP products has changed as follows" +
                    ":", ((string)(null)), table23, "And ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "IsInstalled"});
            table24.AddRow(new string[] {
                        "UserAndDeviceAssignableProduct",
                        "true"});
#line 135
    testRunner.And("The current iOS device has the following Apple VPP product statuses:", ((string)(null)), table24, "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "AssignmentType"});
            table25.AddRow(new string[] {
                        "UserAndDeviceAssignableProduct",
                        string.Format("{0}", toAssignmentType)});
#line 138
 testRunner.When("I have modified the App Catalog rule named \'AppCatalogRuleName.{guid}\' and target" +
                    "ing the current iOS device with the following Apple VPP products:", ((string)(null)), table25, "When ");
#line 141
 testRunner.And(string.Format("I request the current iOS device to check in to install the \'{0}\' applications", toAssignmentType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 142
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\RefreshAccount to re" +
                    "fresh a VPP account with identifier \'VPPAccountID.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "ChangeInNumberAssignedLicenses"});
            table26.AddRow(new string[] {
                        "UserAndDeviceAssignableProduct",
                        "1"});
#line 143
 testRunner.Then("The number of assigned licenses for the Apple VPP products has changed as follows" +
                    ":", ((string)(null)), table26, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "IsInstalled"});
            table27.AddRow(new string[] {
                        "UserAndDeviceAssignableProduct",
                        "true"});
#line 146
 testRunner.And("The current iOS device has the following Apple VPP product statuses:", ((string)(null)), table27, "And ");
#line 149
 testRunner.When("I call Public API function AppleVolumePurchaseProgramService\\Reconcile to revoke " +
                    "unused licenses and retire unused users for all VPP accounts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 150
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\RefreshAccount to re" +
                    "fresh a VPP account with identifier \'VPPAccountID.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "ChangeInNumberAssignedLicenses"});
            table28.AddRow(new string[] {
                        "UserAndDeviceAssignableProduct",
                        "-1"});
#line 151
 testRunner.Then("The number of assigned licenses for the Apple VPP products has changed as follows" +
                    ":", ((string)(null)), table28, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert an app in an App Catalog rule from a purchased app to an Apple VPP one")]
        [NUnit.Framework.CategoryAttribute("CleanDatabaseForVpp")]
        [NUnit.Framework.CategoryAttribute("CarryOverScenarioContext")]
        [NUnit.Framework.TestCaseAttribute("AppleIdBased", null)]
        [NUnit.Framework.TestCaseAttribute("DeviceBased", null)]
        public virtual void ConvertAnAppInAnAppCatalogRuleFromAPurchasedAppToAnAppleVPPOne(string vppAppAssignmentType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CleanDatabaseForVpp",
                    "CarryOverScenarioContext"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert an app in an App Catalog rule from a purchased app to an Apple VPP one", @__tags);
#line 162
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "IsDeviceAssignable"});
            table29.AddRow(new string[] {
                        "UserAssignableProduct",
                        "true"});
#line 163
 testRunner.Given("There exist Apple VPP products with available licenses in the Apple VPP Account w" +
                    "ith identifier \'VPPAccountID.{guid}\' with the following criteria:", ((string)(null)), table29, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "IsInstalled"});
            table30.AddRow(new string[] {
                        "UserAssignableProduct",
                        "false"});
#line 166
 testRunner.And("The current iOS device has the following Apple VPP product statuses:", ((string)(null)), table30, "And ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "AssignmentType"});
            table31.AddRow(new string[] {
                        "UserAssignableProduct",
                        "{null}"});
#line 169
 testRunner.And("I have created an App Catalog rule with name \'autogenerate AppCatalogRuleName.{gu" +
                    "id}\' with the following Apple VPP products targeting the current device:", ((string)(null)), table31, "And ");
#line 172
 testRunner.And("I request the current iOS device to check in to install the \'Purchased\' applicati" +
                    "ons", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 173
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\RefreshAccount to re" +
                    "fresh a VPP account with identifier \'VPPAccountID.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "ChangeInNumberAssignedLicenses"});
            table32.AddRow(new string[] {
                        "UserAssignableProduct",
                        "0"});
#line 174
 testRunner.And("The number of assigned licenses for the Apple VPP products has changed as follows" +
                    ":", ((string)(null)), table32, "And ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "IsInstalled"});
            table33.AddRow(new string[] {
                        "UserAssignableProduct",
                        "true"});
#line 177
    testRunner.And("The current iOS device has the following Apple VPP product statuses:", ((string)(null)), table33, "And ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "AssignmentType"});
            table34.AddRow(new string[] {
                        "UserAssignableProduct",
                        string.Format("{0}", vppAppAssignmentType)});
#line 180
 testRunner.When("I have modified the App Catalog rule named \'AppCatalogRuleName.{guid}\' and target" +
                    "ing the current iOS device with the following Apple VPP products:", ((string)(null)), table34, "When ");
#line 183
 testRunner.And(string.Format("I request the current iOS device to check in to install the \'{0}\' applications", vppAppAssignmentType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 184
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\RefreshAccount to re" +
                    "fresh a VPP account with identifier \'VPPAccountID.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "ChangeInNumberAssignedLicenses"});
            table35.AddRow(new string[] {
                        "UserAssignableProduct",
                        "1"});
#line 185
 testRunner.Then("The number of assigned licenses for the Apple VPP products has changed as follows" +
                    ":", ((string)(null)), table35, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "IsInstalled"});
            table36.AddRow(new string[] {
                        "UserAssignableProduct",
                        "true"});
#line 188
 testRunner.And("The current iOS device has the following Apple VPP product statuses:", ((string)(null)), table36, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
