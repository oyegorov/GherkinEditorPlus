// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Soti.MobiControl.Bdd.PublicApiTests.Features.PublicAPI.AppleVolumePurchaseProgram
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Add Apple VPP Account")]
    public partial class AddAppleVPPAccountFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AddAppleVppAccount.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Add Apple VPP Account", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Upload a VPP token using Apple VPP services")]
        [NUnit.Framework.CategoryAttribute("CleanDatabaseForVpp")]
        public virtual void UploadAVPPTokenUsingAppleVPPServices()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Upload a VPP token using Apple VPP services", new string[] {
                        "CleanDatabaseForVpp"});
#line 4
this.ScenarioSetup(scenarioInfo);
#line 5
 testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
 testRunner.And("MobiControl is configured to use the Apple VPP services", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 7
 testRunner.When("I call Public API function AppleVolumePurchaseProgramService\\VerifyAccount to upl" +
                    "oad a VPP token from \'file:\\\\storage\\\\qaShare\\\\BDD_IntegrationTests_Data\\\\AppleV" +
                    "olumePurchaseProgram\\\\iosvpp@soti.net.vpptoken\' using identifier \'{null}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
 testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 9
 testRunner.And("Last call to AppleVolumePurchaseProgramService\\VerifyAccount has resulted in the " +
                    "successful upload of the VPP token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Upload a VPP token using Apple VPP simulator")]
        [NUnit.Framework.CategoryAttribute("CleanDatabaseForVpp")]
        public virtual void UploadAVPPTokenUsingAppleVPPSimulator()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Upload a VPP token using Apple VPP simulator", new string[] {
                        "CleanDatabaseForVpp"});
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
 testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 14
 testRunner.When("I call Public API function AppleVolumePurchaseProgramService\\VerifyAccount to upl" +
                    "oad a VPP token from \'file:\\\\storage\\\\qaShare\\\\BDD_IntegrationTests_Data\\\\AppleV" +
                    "olumePurchaseProgram\\\\vppsim.vpptoken\' using identifier \'{null}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
 testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 16
 testRunner.And("Last call to AppleVolumePurchaseProgramService\\VerifyAccount has resulted in the " +
                    "successful upload of the VPP token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Upload an invalid VPP token")]
        [NUnit.Framework.CategoryAttribute("CleanDatabaseForVpp")]
        [NUnit.Framework.TestCaseAttribute("file:\\\\storage\\qaShare\\BDD_IntegrationTests_Data\\AppleVolumePurchaseProgram\\iosvp" +
            "p@soti.net.vpptoken", "1328", null)]
        [NUnit.Framework.TestCaseAttribute("file:\\\\storage\\qaShare\\BDD_IntegrationTests_Data\\AppleVolumePurchaseProgram\\inval" +
            "id.vpptoken", "1327", null)]
        public virtual void UploadAnInvalidVPPToken(string vppTokenLocation, string result, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CleanDatabaseForVpp"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Upload an invalid VPP token", @__tags);
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
 testRunner.When(string.Format("I call Public API function AppleVolumePurchaseProgramService\\VerifyAccount to upl" +
                        "oad a VPP token from \'{0}\' using identifier \'{{null}}\'", vppTokenLocation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.Then(string.Format("Last call to AppleVolumePurchaseProgramService\\VerifyAccount has resulted in a fa" +
                        "ilure with error code \'{0}\'", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a VPP account")]
        [NUnit.Framework.CategoryAttribute("CleanDatabaseForVpp")]
        public virtual void AddAVPPAccount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a VPP account", new string[] {
                        "CleanDatabaseForVpp"});
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
 testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 32
 testRunner.When(@"I call Public API function AppleVolumePurchaseProgramService\AddAccount to create a VPP account with description 'autogenerate VPPAccountName.{guid}', identifier 'autogenerate VPPAccountID.{guid}' and VPP token from 'file:\\storage\\qaShare\\BDD_IntegrationTests_Data\\AppleVolumePurchaseProgram\\vppsim.vpptoken'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
 testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 34
 testRunner.And("Last call to AppleVolumePurchaseProgramService\\AddAccount has resulted in a VPP a" +
                    "ccount with description \'VPPAccountName.{guid}\' and identifier \'VPPAccountID.{gu" +
                    "id}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\GetAccountsSummary t" +
                    "o retrieve all VPP accounts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
 testRunner.And("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
 testRunner.And("Last call to AppleVolumePurchaseProgramService\\GetAccountsSummary has resulted in" +
                    " a VPP account with description \'VPPAccountName.{guid}\' and identifier \'VPPAccou" +
                    "ntID.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Upload and add a VPP account")]
        [NUnit.Framework.CategoryAttribute("CleanDatabaseForVpp")]
        public virtual void UploadAndAddAVPPAccount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Upload and add a VPP account", new string[] {
                        "CleanDatabaseForVpp"});
#line 40
this.ScenarioSetup(scenarioInfo);
#line 41
 testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 42
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\VerifyAccount to upl" +
                    "oad a VPP token from \'file:\\\\storage\\\\qaShare\\\\BDD_IntegrationTests_Data\\\\AppleV" +
                    "olumePurchaseProgram\\\\vppsim.vpptoken\' using identifier \'autogenerate VPPAccount" +
                    "ID.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
 testRunner.And("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
 testRunner.And("Last call to AppleVolumePurchaseProgramService\\VerifyAccount has resulted in the " +
                    "successful upload of the VPP token with identifier \'VPPAccountID.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
 testRunner.When(@"I call Public API function AppleVolumePurchaseProgramService\AddAccount to create a VPP account with description 'autogenerate VPPAccountName.{guid}', identifier 'VPPAccountID.{guid}' and VPP token from 'file:\\storage\\qaShare\\BDD_IntegrationTests_Data\\AppleVolumePurchaseProgram\\vppsim.vpptoken'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 46
 testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 47
 testRunner.And("Last call to AppleVolumePurchaseProgramService\\AddAccount has resulted in a VPP a" +
                    "ccount with description \'VPPAccountName.{guid}\' and identifier \'VPPAccountID.{gu" +
                    "id}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\GetAccountsSummary t" +
                    "o retrieve all VPP accounts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 49
 testRunner.And("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 50
 testRunner.And("Last call to AppleVolumePurchaseProgramService\\GetAccountsSummary has resulted in" +
                    " a VPP account with description \'VPPAccountName.{guid}\' and identifier \'VPPAccou" +
                    "ntID.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a VPP account with a duplicate VPP token")]
        [NUnit.Framework.CategoryAttribute("CleanDatabaseForVpp")]
        public virtual void AddAVPPAccountWithADuplicateVPPToken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a VPP account with a duplicate VPP token", new string[] {
                        "CleanDatabaseForVpp"});
#line 53
this.ScenarioSetup(scenarioInfo);
#line 54
 testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 55
 testRunner.When(@"I call Public API function AppleVolumePurchaseProgramService\AddAccount to create a VPP account with description 'autogenerate VPPAccountName1.{guid}', identifier 'autogenerate VPPAccountID.{guid}' and VPP token from 'file:\\storage\\qaShare\\BDD_IntegrationTests_Data\\AppleVolumePurchaseProgram\\vppsim.vpptoken'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 56
 testRunner.And("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
 testRunner.And(@"I call Public API function AppleVolumePurchaseProgramService\AddAccount to create a VPP account with description 'autogenerate VPPAccountName2.{guid}', identifier '{null}' and VPP token from 'file:\\storage\\qaShare\\BDD_IntegrationTests_Data\\AppleVolumePurchaseProgram\\vppsim.vpptoken'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
 testRunner.Then("Last call to AppleVolumePurchaseProgramService\\AddAccount has resulted in an erro" +
                    "r code \'1316\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 59
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\GetAccountsSummary t" +
                    "o retrieve all VPP accounts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
 testRunner.And("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
 testRunner.And("Last call to AppleVolumePurchaseProgramService\\GetAccountsSummary has resulted in" +
                    " a VPP account with description \'VPPAccountName1.{guid}\' and identifier \'VPPAcco" +
                    "untID.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a VPP account with a duplicate description")]
        [NUnit.Framework.CategoryAttribute("CleanDatabaseForVpp")]
        public virtual void AddAVPPAccountWithADuplicateDescription()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a VPP account with a duplicate description", new string[] {
                        "CleanDatabaseForVpp"});
#line 64
this.ScenarioSetup(scenarioInfo);
#line 65
 testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 66
 testRunner.When(@"I call Public API function AppleVolumePurchaseProgramService\AddAccount to create a VPP account with description 'autogenerate VPPAccountName.{guid}', identifier 'autogenerate VPPAccountID.{guid}' and VPP token from 'file:\\storage\\qaShare\\BDD_IntegrationTests_Data\\AppleVolumePurchaseProgram\\vppsim.vpptoken'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 67
 testRunner.And("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
 testRunner.And(@"I call Public API function AppleVolumePurchaseProgramService\AddAccount to create a VPP account with description 'VPPAccountName.{guid}', identifier '{null}' and VPP token from 'file:\\storage\\qaShare\\BDD_IntegrationTests_Data\\AppleVolumePurchaseProgram\\iosvpp@soti.net.vpptoken'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
 testRunner.Then("Last call to AppleVolumePurchaseProgramService\\AddAccount has resulted in an erro" +
                    "r code \'1308\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 70
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\GetAccountsSummary t" +
                    "o retrieve all VPP accounts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
 testRunner.And("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
 testRunner.And("Last call to AppleVolumePurchaseProgramService\\GetAccountsSummary has resulted in" +
                    " a VPP account with description \'VPPAccountName.{guid}\' and identifier \'VPPAccou" +
                    "ntID.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
