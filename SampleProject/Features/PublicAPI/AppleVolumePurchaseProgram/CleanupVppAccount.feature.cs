// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Soti.MobiControl.Bdd.PublicApiTests.Features.PublicAPI.AppleVolumePurchaseProgram
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Cleanup VPP account")]
    public partial class CleanupVPPAccountFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CleanupVppAccount.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Cleanup VPP account", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
testRunner.And("I have enabled LDAP integration for LDAP connection \'{sotiqa}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "PrincipalType",
                        "Name",
                        "DisplayName",
                        "DomainName",
                        "LdapConnectionName",
                        "MemberOf"});
            table1.AddRow(new string[] {
                        "ActiveDirectoryUser",
                        "Jon",
                        "Jon",
                        "SOTIQA",
                        "{sotiqa}",
                        "MobiControl Administrators"});
#line 6
testRunner.And("I have created principals as follows:", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceName",
                        "RuleName",
                        "LdapConnection",
                        "LdapUserName",
                        "LdapUserPassword",
                        "DeviceId",
                        "IsITunesStoreAccountActive",
                        "ITunesStoreAccountHash"});
            table2.AddRow(new string[] {
                        "autogenerate IosSimulatorDevice.{guid}",
                        "{iosrule_sotiqa}",
                        "{sotiqa}",
                        "Jon",
                        "Welcome1234",
                        "autogenerate deviceId.{guid}",
                        "True",
                        "autogenerate iTunes.{guid}"});
#line 9
testRunner.And("I enrolled Ios Device with properties as follows(execute once):", ((string)(null)), table2, "And ");
#line 12
testRunner.And("Using device simulator with ID \'deviceId.{guid}\' as current", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
testRunner.And("I have reset VppSimulator database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
testRunner.When(@"I call Public API function AppleVolumePurchaseProgramService\AddAccount to create a VPP account with description 'autogenerate VPPAccountName.{guid}', identifier 'autogenerate VPPAccountID.{guid}' and VPP token from 'file:\\storage\\qaShare\\BDD_IntegrationTests_Data\\AppleVolumePurchaseProgram\\vppsim.vpptoken'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cleanup managed Apple VPP licenses in VPP account")]
        [NUnit.Framework.CategoryAttribute("CleanDatabaseForVpp")]
        [NUnit.Framework.CategoryAttribute("CarryOverScenarioContext")]
        [NUnit.Framework.TestCaseAttribute("AppleIdBased", null)]
        [NUnit.Framework.TestCaseAttribute("DeviceBased", null)]
        [NUnit.Framework.TestCaseAttribute("AppleIdBased", null)]
        [NUnit.Framework.TestCaseAttribute("DeviceBased", null)]
        public virtual void CleanupManagedAppleVPPLicensesInVPPAccount(string vppAppAssignmentType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CleanDatabaseForVpp",
                    "CarryOverScenarioContext"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cleanup managed Apple VPP licenses in VPP account", @__tags);
#line 19
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "IsDeviceAssignable"});
            table3.AddRow(new string[] {
                        "UserAssignableProduct",
                        "true"});
#line 20
 testRunner.Given("There exist Apple VPP products with available licenses in the Apple VPP Account w" +
                    "ith identifier \'VPPAccountID.{guid}\' with the following criteria:", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "IsInstalled"});
            table4.AddRow(new string[] {
                        "UserAssignableProduct",
                        "false"});
#line 23
 testRunner.And("The current iOS device has the following Apple VPP product statuses:", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "AssignmentType"});
            table5.AddRow(new string[] {
                        "UserAssignableProduct",
                        string.Format("{0}", vppAppAssignmentType)});
#line 26
 testRunner.And("I have created an App Catalog rule with name \'autogenerate AppCatalogRuleName.{gu" +
                    "id}\' with the following Apple VPP products targeting the current device:", ((string)(null)), table5, "And ");
#line 29
 testRunner.When(string.Format("I request the current iOS device to check in to install the \'{0}\' applications", vppAppAssignmentType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\RefreshAccount to re" +
                    "fresh a VPP account with identifier \'VPPAccountID.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "ChangeInNumberAssignedLicenses"});
            table6.AddRow(new string[] {
                        "UserAssignableProduct",
                        "1"});
#line 31
 testRunner.And("The number of assigned licenses for the Apple VPP products has changed as follows" +
                    ":", ((string)(null)), table6, "And ");
#line 34
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\CleanupAccount to re" +
                    "claim all not used licenses for a VPP account with identifier \'VPPAccountID.{gui" +
                    "d}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\RefreshAccount to re" +
                    "fresh a VPP account with identifier \'VPPAccountID.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "ChangeInNumberAssignedLicenses"});
            table7.AddRow(new string[] {
                        "UserAssignableProduct",
                        "0"});
#line 36
 testRunner.And("The number of assigned licenses for the Apple VPP products has changed as follows" +
                    ":", ((string)(null)), table7, "And ");
#line 39
    testRunner.And("I delete the App Catalog rule named \'AppCatalogRuleName.{guid}\' and targeting the" +
                    " current device", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\CleanupAccount to re" +
                    "claim all not used licenses for a VPP account with identifier \'VPPAccountID.{gui" +
                    "d}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\RefreshAccount to re" +
                    "fresh a VPP account with identifier \'VPPAccountID.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "ChangeInNumberAssignedLicenses"});
            table8.AddRow(new string[] {
                        "UserAssignableProduct",
                        "-1"});
#line 42
 testRunner.And("The number of assigned licenses for the Apple VPP products has changed as follows" +
                    ":", ((string)(null)), table8, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cleanup unmanaged Apple VPP user-based licenses in VPP account")]
        [NUnit.Framework.CategoryAttribute("CleanDatabaseForVpp")]
        [NUnit.Framework.CategoryAttribute("CarryOverScenarioContext")]
        public virtual void CleanupUnmanagedAppleVPPUser_BasedLicensesInVPPAccount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cleanup unmanaged Apple VPP user-based licenses in VPP account", new string[] {
                        "CleanDatabaseForVpp",
                        "CarryOverScenarioContext"});
#line 58
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "IsDeviceAssignable"});
            table9.AddRow(new string[] {
                        "UserAssignableProduct",
                        "true"});
#line 59
 testRunner.Given("There exist Apple VPP products with available licenses in the Apple VPP Account w" +
                    "ith identifier \'VPPAccountID.{guid}\' with the following criteria:", ((string)(null)), table9, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "IsInstalled"});
            table10.AddRow(new string[] {
                        "UserAssignableProduct",
                        "false"});
#line 62
 testRunner.And("The current iOS device has the following Apple VPP product statuses:", ((string)(null)), table10, "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "AssignmentType"});
            table11.AddRow(new string[] {
                        "UserAssignableProduct",
                        "AppleIdBased"});
#line 65
 testRunner.And("I have created an App Catalog rule with name \'autogenerate AppCatalogRuleName.{gu" +
                    "id}\' with the following Apple VPP products targeting the current device:", ((string)(null)), table11, "And ");
#line 68
 testRunner.When("I request the current iOS device to check in to install the \'AppleIdBased\' applic" +
                    "ations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 69
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\RefreshAccount to re" +
                    "fresh a VPP account with identifier \'VPPAccountID.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "ChangeInNumberAssignedLicenses"});
            table12.AddRow(new string[] {
                        "UserAssignableProduct",
                        "1"});
#line 70
 testRunner.And("The number of assigned licenses for the Apple VPP products has changed as follows" +
                    ":", ((string)(null)), table12, "And ");
#line 73
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\CleanupAccount to re" +
                    "claim all not used licenses for a VPP account with identifier \'VPPAccountID.{gui" +
                    "d}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\RefreshAccount to re" +
                    "fresh a VPP account with identifier \'VPPAccountID.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "ChangeInNumberAssignedLicenses"});
            table13.AddRow(new string[] {
                        "UserAssignableProduct",
                        "0"});
#line 75
 testRunner.And("The number of assigned licenses for the Apple VPP products has changed as follows" +
                    ":", ((string)(null)), table13, "And ");
#line 78
    testRunner.And("I delete the App Catalog rule named \'AppCatalogRuleName.{guid}\' and targeting the" +
                    " current device", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 79
 testRunner.And("I hacked Database for change vppUser from managed to unmanaged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 80
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\CleanupAccount to re" +
                    "claim all not used licenses for a VPP account with identifier \'VPPAccountID.{gui" +
                    "d}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\RefreshAccount to re" +
                    "fresh a VPP account with identifier \'VPPAccountID.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "ChangeInNumberAssignedLicenses"});
            table14.AddRow(new string[] {
                        "UserAssignableProduct",
                        "-1"});
#line 82
 testRunner.And("The number of assigned licenses for the Apple VPP products has changed as follows" +
                    ":", ((string)(null)), table14, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
