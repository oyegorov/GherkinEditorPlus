// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Soti.MobiControl.Bdd.PublicApiTests.Features.PublicAPI.AppleVolumePurchaseProgram
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Assign Apple Vpp License to Multiple Devices")]
    public partial class AssignAppleVppLicenseToMultipleDevicesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AssignAppleVppLicenseMultiple.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Assign Apple Vpp License to Multiple Devices", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
testRunner.And("I have enabled LDAP integration for LDAP connection \'{sotiqa}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "PrincipalType",
                        "Name",
                        "DisplayName",
                        "DomainName",
                        "LdapConnectionName",
                        "MemberOf"});
            table1.AddRow(new string[] {
                        "ActiveDirectoryUser",
                        "Jon",
                        "Jon",
                        "SOTIQA",
                        "{sotiqa}",
                        "MobiControl Administrators"});
#line 6
testRunner.And("I have created principals as follows:", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceName",
                        "RuleName",
                        "LdapConnection",
                        "LdapUserName",
                        "LdapUserPassword",
                        "DeviceId",
                        "IsITunesStoreAccountActive",
                        "ITunesStoreAccountHash"});
            table2.AddRow(new string[] {
                        "autogenerate IosSimulatorDevice.{guid}",
                        "{iosrule_sotiqa}",
                        "{sotiqa}",
                        "Jon",
                        "Welcome1234",
                        "autogenerate deviceId1.{guid}",
                        "True",
                        "autogenerate iTunes.{guid}"});
            table2.AddRow(new string[] {
                        "autogenerate IosSimulatorDevice.{guid}",
                        "{iosrule_sotiqa}",
                        "{sotiqa}",
                        "Jon",
                        "Welcome1234",
                        "autogenerate deviceId2.{guid}",
                        "True",
                        "iTunes.{guid}"});
#line 9
testRunner.And("I have enrolled Ios Devices with properties as follows:", ((string)(null)), table2, "And ");
#line 13
testRunner.And("I have reset VppSimulator database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
testRunner.When(@"I call Public API function AppleVolumePurchaseProgramService\AddAccount to create a VPP account with description 'autogenerate VPPAccountName.{guid}', identifier 'autogenerate VPPAccountID.{guid}' and VPP token from 'file:\\storage\\qaShare\\BDD_IntegrationTests_Data\\AppleVolumePurchaseProgram\\vppsim.vpptoken'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Assign Apple VPP user-based and device-based licensed apps in an App Catalog rule" +
            " to multiple devices and then revoke by reconciling licenses (TC 75039, TC 75580" +
            ")")]
        [NUnit.Framework.CategoryAttribute("CleanDatabaseForVpp")]
        [NUnit.Framework.CategoryAttribute("CarryOverScenarioContext")]
        [NUnit.Framework.TestCaseAttribute("I unenroll the iOS device with ID \'deviceId1.{guid}\'", "I unenroll the iOS device with ID \'deviceId2.{guid}\'", null)]
        [NUnit.Framework.TestCaseAttribute("I delete the App Catalog rule named \'AppCatalogRuleName1.{guid}\' and targeting th" +
            "e device with ID \'deviceId1.{guid}\'", "I delete the App Catalog rule named \'AppCatalogRuleName2.{guid}\' and targeting th" +
            "e device with ID \'deviceId2.{guid}\'", null)]
        public virtual void AssignAppleVPPUser_BasedAndDevice_BasedLicensedAppsInAnAppCatalogRuleToMultipleDevicesAndThenRevokeByReconcilingLicensesTC75039TC75580(string firstStep, string secondStep, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CleanDatabaseForVpp",
                    "CarryOverScenarioContext"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign Apple VPP user-based and device-based licensed apps in an App Catalog rule" +
                    " to multiple devices and then revoke by reconciling licenses (TC 75039, TC 75580" +
                    ")", @__tags);
#line 19
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "IsDeviceAssignable"});
            table3.AddRow(new string[] {
                        "UserAssignableProduct",
                        "true"});
            table3.AddRow(new string[] {
                        "DeviceAssignableProduct",
                        "true"});
#line 20
 testRunner.Given("There exist Apple VPP products with available licenses in the Apple VPP Account w" +
                    "ith identifier \'VPPAccountID.{guid}\' with the following criteria:", ((string)(null)), table3, "Given ");
#line 24
 testRunner.And("Using device simulator with ID \'deviceId1.{guid}\' as current", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "IsInstalled"});
            table4.AddRow(new string[] {
                        "UserAssignableProduct",
                        "false"});
            table4.AddRow(new string[] {
                        "DeviceAssignableProduct",
                        "false"});
#line 25
 testRunner.And("The current iOS device has the following Apple VPP product statuses:", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "AssignmentType"});
            table5.AddRow(new string[] {
                        "UserAssignableProduct",
                        "AppleIdBased"});
            table5.AddRow(new string[] {
                        "DeviceAssignableProduct",
                        "DeviceBased"});
#line 29
 testRunner.And("I have created an App Catalog rule with name \'autogenerate AppCatalogRuleName1.{g" +
                    "uid}\' with the following Apple VPP products targeting the current device:", ((string)(null)), table5, "And ");
#line 33
 testRunner.When("The current iOS device fully checks in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
 testRunner.Then("I call Public API function AppleVolumePurchaseProgramService\\RefreshAccount to re" +
                    "fresh a VPP account with identifier \'VPPAccountID.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "ChangeInNumberAssignedLicenses"});
            table6.AddRow(new string[] {
                        "UserAssignableProduct",
                        "0"});
            table6.AddRow(new string[] {
                        "DeviceAssignableProduct",
                        "1"});
#line 35
 testRunner.And("The number of assigned licenses for the Apple VPP products has changed as follows" +
                    ":", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "IsInstalled"});
            table7.AddRow(new string[] {
                        "UserAssignableProduct",
                        "false"});
            table7.AddRow(new string[] {
                        "DeviceAssignableProduct",
                        "true"});
#line 39
 testRunner.And("The current iOS device has the following Apple VPP product statuses:", ((string)(null)), table7, "And ");
#line 43
 testRunner.And("A device level log has been created to indicate a \'DeviceBased\' VPP license for t" +
                    "he product \'DeviceAssignableProduct\' was assigned to the device \'deviceId1.{guid" +
                    "}\' from VPP account \'VPPAccountName.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
 testRunner.And("A \'Deployment\' server level log has been created to indicate a \'DeviceBased\' VPP " +
                    "license for the product \'DeviceAssignableProduct\' was assigned to the device \'de" +
                    "viceId1.{guid}\' from VPP account \'VPPAccountName.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
 testRunner.And("A device level log has been created to indicate a VPP program invitation for VPP " +
                    "account \'VPPAccountName.{guid}\' was sent to the device \'deviceId1.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId"});
            table8.AddRow(new string[] {
                        "deviceId1.{guid}"});
            table8.AddRow(new string[] {
                        "deviceId2.{guid}"});
#line 46
 testRunner.Then("I associate all VPP users in the VPP simulator and update the iTunes ID hash for " +
                    "the following devices:", ((string)(null)), table8, "Then ");
#line 50
 testRunner.And("The current iOS device fully checks in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\RefreshAccount to re" +
                    "fresh a VPP account with identifier \'VPPAccountID.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "ChangeInNumberAssignedLicenses"});
            table9.AddRow(new string[] {
                        "UserAssignableProduct",
                        "1"});
            table9.AddRow(new string[] {
                        "DeviceAssignableProduct",
                        "0"});
#line 52
 testRunner.And("The number of assigned licenses for the Apple VPP products has changed as follows" +
                    ":", ((string)(null)), table9, "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "IsInstalled"});
            table10.AddRow(new string[] {
                        "UserAssignableProduct",
                        "true"});
            table10.AddRow(new string[] {
                        "DeviceAssignableProduct",
                        "true"});
#line 56
 testRunner.And("The current iOS device has the following Apple VPP product statuses:", ((string)(null)), table10, "And ");
#line 60
 testRunner.And("A device level log has been created to indicate a VPP program invitation for VPP " +
                    "account \'VPPAccountName.{guid}\' was accepted by the device \'deviceId1.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
 testRunner.And("A device level log has been created to indicate a \'AppleIdBased\' VPP license for " +
                    "the product \'UserAssignableProduct\' was assigned to the device \'deviceId1.{guid}" +
                    "\' from VPP account \'VPPAccountName.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
 testRunner.And("A \'Deployment\' server level log has been created to indicate a \'AppleIdBased\' VPP" +
                    " license for the product \'UserAssignableProduct\' was assigned to the device \'dev" +
                    "iceId1.{guid}\' from VPP account \'VPPAccountName.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
 testRunner.Given("Using device simulator with ID \'deviceId2.{guid}\' as current", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "IsInstalled"});
            table11.AddRow(new string[] {
                        "UserAssignableProduct",
                        "false"});
            table11.AddRow(new string[] {
                        "DeviceAssignableProduct",
                        "false"});
#line 64
 testRunner.And("The current iOS device has the following Apple VPP product statuses:", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "AssignmentType"});
            table12.AddRow(new string[] {
                        "UserAssignableProduct",
                        "AppleIdBased"});
            table12.AddRow(new string[] {
                        "DeviceAssignableProduct",
                        "DeviceBased"});
#line 68
 testRunner.And("I have created an App Catalog rule with name \'autogenerate AppCatalogRuleName2.{g" +
                    "uid}\' with the following Apple VPP products targeting the current device:", ((string)(null)), table12, "And ");
#line 72
 testRunner.When("The current iOS device fully checks in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 73
 testRunner.Then("I call Public API function AppleVolumePurchaseProgramService\\RefreshAccount to re" +
                    "fresh a VPP account with identifier \'VPPAccountID.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "ChangeInNumberAssignedLicenses"});
            table13.AddRow(new string[] {
                        "UserAssignableProduct",
                        "0"});
            table13.AddRow(new string[] {
                        "DeviceAssignableProduct",
                        "1"});
#line 74
 testRunner.And("The number of assigned licenses for the Apple VPP products has changed as follows" +
                    ":", ((string)(null)), table13, "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "IsInstalled"});
            table14.AddRow(new string[] {
                        "UserAssignableProduct",
                        "true"});
            table14.AddRow(new string[] {
                        "DeviceAssignableProduct",
                        "true"});
#line 78
 testRunner.And("The current iOS device has the following Apple VPP product statuses:", ((string)(null)), table14, "And ");
#line 82
 testRunner.And("A device level log has been created to indicate a \'DeviceBased\' VPP license for t" +
                    "he product \'DeviceAssignableProduct\' was assigned to the device \'deviceId2.{guid" +
                    "}\' from VPP account \'VPPAccountName.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 83
 testRunner.And("A \'Deployment\' server level log has been created to indicate a \'DeviceBased\' VPP " +
                    "license for the product \'DeviceAssignableProduct\' was assigned to the device \'de" +
                    "viceId2.{guid}\' from VPP account \'VPPAccountName.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
 testRunner.And("A device level log has been created to indicate a AppleIdBased VPP license for th" +
                    "e product \'UserAssignableProduct\' was already assigned to the device \'deviceId2." +
                    "{guid}\' from VPP account \'VPPAccountName.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\Reconcile to revoke " +
                    "unused licenses and retire unused users for all VPP accounts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\RefreshAccount to re" +
                    "fresh a VPP account with identifier \'VPPAccountID.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "ChangeInNumberAssignedLicenses"});
            table15.AddRow(new string[] {
                        "UserAssignableProduct",
                        "0"});
            table15.AddRow(new string[] {
                        "DeviceAssignableProduct",
                        "0"});
#line 87
 testRunner.And("The number of assigned licenses for the Apple VPP products has changed as follows" +
                    ":", ((string)(null)), table15, "And ");
#line 91
 testRunner.When(string.Format("I execute the step \'{0}\'", firstStep), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 92
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\Reconcile to revoke " +
                    "unused licenses and retire unused users for all VPP accounts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 93
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\RefreshAccount to re" +
                    "fresh a VPP account with identifier \'VPPAccountID.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "ChangeInNumberAssignedLicenses"});
            table16.AddRow(new string[] {
                        "UserAssignableProduct",
                        "0"});
            table16.AddRow(new string[] {
                        "DeviceAssignableProduct",
                        "-1"});
#line 94
 testRunner.Then("The number of assigned licenses for the Apple VPP products has changed as follows" +
                    ":", ((string)(null)), table16, "Then ");
#line 98
 testRunner.And("A device level log has been created to indicate a \'DeviceBased\' VPP license for t" +
                    "he product \'DeviceAssignableProduct\' was revoked from the device \'deviceId1.{gui" +
                    "d}\' from VPP account \'VPPAccountName.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 99
 testRunner.And("A \'ManagementService\' server level log has been created to indicate a \'DeviceBase" +
                    "d\' VPP license for the product \'DeviceAssignableProduct\' was revoked from the de" +
                    "vice \'deviceId1.{guid}\' from VPP account \'VPPAccountName.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 100
 testRunner.When(string.Format("I execute the step \'{0}\'", secondStep), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 101
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\Reconcile to revoke " +
                    "unused licenses and retire unused users for all VPP accounts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 102
 testRunner.And("I call Public API function AppleVolumePurchaseProgramService\\RefreshAccount to re" +
                    "fresh a VPP account with identifier \'VPPAccountID.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductIdentifier",
                        "ChangeInNumberAssignedLicenses"});
            table17.AddRow(new string[] {
                        "UserAssignableProduct",
                        "-1"});
            table17.AddRow(new string[] {
                        "DeviceAssignableProduct",
                        "-1"});
#line 103
 testRunner.Then("The number of assigned licenses for the Apple VPP products has changed as follows" +
                    ":", ((string)(null)), table17, "Then ");
#line 107
 testRunner.And("A device level log has been created to indicate a \'DeviceBased\' VPP license for t" +
                    "he product \'DeviceAssignableProduct\' was revoked from the device \'deviceId2.{gui" +
                    "d}\' from VPP account \'VPPAccountName.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 108
 testRunner.And("A \'ManagementService\' server level log has been created to indicate a \'DeviceBase" +
                    "d\' VPP license for the product \'DeviceAssignableProduct\' was revoked from the de" +
                    "vice \'deviceId2.{guid}\' from VPP account \'VPPAccountName.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 109
 testRunner.And("A device level log has been created to indicate a \'AppleIdBased\' VPP license for " +
                    "the product \'UserAssignableProduct\' was revoked from the device \'deviceId2.{guid" +
                    "}\' from VPP account \'VPPAccountName.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 110
 testRunner.And("A device level log has been created to indicate a \'AppleIdBased\' VPP license for " +
                    "the product \'UserAssignableProduct\' was revoked from the device \'deviceId1.{guid" +
                    "}\' from VPP account \'VPPAccountName.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 111
 testRunner.And("A \'ManagementService\' server level log has been created to indicate a \'AppleIdBas" +
                    "ed\' VPP license for the product \'UserAssignableProduct\' was revoked from the dev" +
                    "ice \'deviceId2.{guid}\' from VPP account \'VPPAccountName.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
