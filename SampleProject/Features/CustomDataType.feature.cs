// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Soti.MobiControl.Bdd.PublicApiTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CustomDataTypeFeature")]
    public partial class CustomDataTypeFeatureFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CustomDataType.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CustomDataTypeFeature", "In order to set custom data on device\r\nAs an administrator\r\nI want to create cust" +
                    "om data type", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add custom data type")]
        public virtual void AddCustomDataType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add custom data type", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "DataType.Name",
                        "DataType.DeviceFamily",
                        "DataType.PhysicalType",
                        "DataType.Expression",
                        "DataType.Description"});
            table1.AddRow(new string[] {
                        "autogenerate CustomTypeName1.{guid}",
                        "AndroidPlus",
                        "String",
                        "INI://Test 1.txt?SC=Section 1&NM=Value 1",
                        "Description 1"});
#line 8
testRunner.When("I make a call to public API to create a custom data type with request properties " +
                    "as follows:", ((string)(null)), table1, "When ");
#line 12
testRunner.Then("The custom data type is created with properties as specified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update custom data type")]
        [NUnit.Framework.IgnoreAttribute()]
        public virtual void UpdateCustomDataType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update custom data type", new string[] {
                        "ignore"});
#line 15
this.ScenarioSetup(scenarioInfo);
#line 16
testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "DataType.Name",
                        "DataType.DeviceFamily",
                        "DataType.PhysicalType",
                        "DataType.Expression",
                        "DataType.Description"});
            table2.AddRow(new string[] {
                        "autogenerate CustomTypeName2.{guid}",
                        "AndroidPlus",
                        "String",
                        "INI://Test 1.txt?SC=Section 1&NM=Value 1",
                        "Description 1"});
#line 17
testRunner.And("I have created custom data type with properties as follows:", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "DataType.Name",
                        "DataType.DeviceFamily",
                        "DeviceFamily",
                        "DataType.PhysicalType",
                        "DataType.Expression",
                        "DataType.Description"});
            table3.AddRow(new string[] {
                        "CustomTypeName2.{guid}",
                        "AndroidPlus",
                        "AndroidPlus",
                        "String",
                        "INI://Test 2.txt?SC=Section 1&NM=Value 2",
                        "Description 2"});
#line 20
testRunner.When("I make a call to pulic API to update a custom data type with request properties a" +
                    "s follows:", ((string)(null)), table3, "When ");
#line 23
testRunner.Then("The custom data type is updated with properties as specified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
