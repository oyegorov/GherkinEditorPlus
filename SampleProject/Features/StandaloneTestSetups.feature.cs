// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Soti.MobiControl.Bdd.PublicApiTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("A set of quick setups for different testing purposes")]
    [NUnit.Framework.IgnoreAttribute()]
    public partial class ASetOfQuickSetupsForDifferentTestingPurposesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "StandaloneTestSetups.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "A set of quick setups for different testing purposes", "", ProgrammingLanguage.CSharp, new string[] {
                        "ignore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Enroll a bunch of iOS devices for SSPUser, grant SSPUser a LoginSSP permission")]
        [NUnit.Framework.TestCaseAttribute("\\MyTestGroup.{time}", null)]
        public virtual void EnrollABunchOfIOSDevicesForSSPUserGrantSSPUserALoginSSPPermission(string targetDeviceGroupPath, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Enroll a bunch of iOS devices for SSPUser, grant SSPUser a LoginSSP permission", exampleTags);
#line 4
this.ScenarioSetup(scenarioInfo);
#line 5
 testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "GroupPath"});
            table1.AddRow(new string[] {
                        string.Format("autogenerate {0}", targetDeviceGroupPath)});
#line 6
 testRunner.And("I have added device groups as follows:", ((string)(null)), table1, "And ");
#line 9
 testRunner.And("I have enabled LDAP integration for LDAP connection \'{sotiqa}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "PrincipalType",
                        "Name",
                        "DisplayName",
                        "DomainName",
                        "LdapConnectionName",
                        "MemberOf"});
            table2.AddRow(new string[] {
                        "ActiveDirectoryUser",
                        "SSPUser",
                        "SSP1",
                        "SOTIQA",
                        "{sotiqa}",
                        "MobiControl Administrators"});
#line 10
 testRunner.And("I have created principals as follows:", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "SecurityRole",
                        "PermissionType",
                        "PermissionName",
                        "IsAllowed"});
            table3.AddRow(new string[] {
                        "DeviceOwner",
                        "Feature",
                        "LoginSSP",
                        "true"});
#line 13
 testRunner.And("I have granted principal \'SSPUser\' the permissions as follows:", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceName",
                        "LdapConnection",
                        "LdapUserName",
                        "LdapUserPassword",
                        "TargetGroup",
                        "DeviceId"});
            table4.AddRow(new string[] {
                        "autogenerate IosSimulator01.{guid}",
                        "{sotiqa}",
                        "SSPUser",
                        "Welcome1234",
                        string.Format("{0}", targetDeviceGroupPath),
                        "autogenerate deviceId01.{guid}"});
            table4.AddRow(new string[] {
                        "autogenerate IosSimulator02.{guid}",
                        "{sotiqa}",
                        "SSPUser",
                        "Welcome1234",
                        string.Format("{0}", targetDeviceGroupPath),
                        "autogenerate deviceId02.{guid}"});
            table4.AddRow(new string[] {
                        "autogenerate IosSimulator03.{guid}",
                        "{sotiqa}",
                        "SSPUser",
                        "Welcome1234",
                        string.Format("{0}", targetDeviceGroupPath),
                        "autogenerate deviceId03.{guid}"});
            table4.AddRow(new string[] {
                        "autogenerate IosSimulator04.{guid}",
                        "{sotiqa}",
                        "SSPUser",
                        "Welcome1234",
                        string.Format("{0}", targetDeviceGroupPath),
                        "autogenerate deviceId04.{guid}"});
            table4.AddRow(new string[] {
                        "autogenerate IosSimulator05.{guid}",
                        "{sotiqa}",
                        "SSPUser",
                        "Welcome1234",
                        string.Format("{0}", targetDeviceGroupPath),
                        "autogenerate deviceId05.{guid}"});
#line 16
 testRunner.And("I have enrolled Ios Devices with properties as follows (execute once):", ((string)(null)), table4, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
