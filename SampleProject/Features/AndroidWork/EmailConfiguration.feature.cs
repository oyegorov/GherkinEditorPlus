// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Soti.MobiControl.Bdd.PublicApiTests.Features.AndroidWork
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("EmailConfiguration")]
    [NUnit.Framework.IgnoreAttribute()]
    public partial class EmailConfigurationFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "EmailConfiguration.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "EmailConfiguration", "  In order to enforce my organization\'s email security policy on provisioned phon" +
                    "es\n  As an Administrator\n  I want to configure s/mime options for the email app\n" +
                    "  And I want to set maximum attachment size and want to enabling/disabling Tasks" +
                    "", ProgrammingLanguage.CSharp, new string[] {
                        "ignore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 8
#line 9
testRunner.Given("I am a user with the name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "DeviceFamily",
                        "TargetGroups",
                        "Priority"});
            table1.AddRow(new string[] {
                        "autogenerate {guid}.RuleName",
                        "AndroidPlus",
                        "\\My Company",
                        "Normal"});
#line 10
    testRunner.And("I have created an Android+ add device rule as follows:", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "AddDeviceRuleName",
                        "DeviceId"});
            table2.AddRow(new string[] {
                        "{guid}.RuleName",
                        "autogenerate {guid}.DeviceId"});
#line 13
    testRunner.And("I have enrolled an AfW device configured as follows:", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "CertificateId",
                        "FilePath",
                        "Password"});
            table3.AddRow(new string[] {
                        "autogenerate {guid}.SigningCertificate",
                        "\\..\\TestsData\\exch2PassIsWelcome1234.pfx",
                        "Welcome1234"});
            table3.AddRow(new string[] {
                        "autogenerate {guid}.EncryptionCertificate",
                        "\\..\\Tests_Data\\exch2PassIsWelcome1234p12ForAndroid.p12",
                        "Welcome1234"});
#line 16
    testRunner.And("I have uploaded the following certificates as <\'CertificateId\'> from <\'FilePath\'>" +
                    "\' with password \'<Password>\':", ((string)(null)), table3, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a profile with an email configuration containing s/mime certificates")]
        [NUnit.Framework.IgnoreAttribute()]
        public virtual void CreateAProfileWithAnEmailConfigurationContainingSMimeCertificates()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a profile with an email configuration containing s/mime certificates", new string[] {
                        "ignore"});
#line 23
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Platform",
                        "Type",
                        "Name"});
            table4.AddRow(new string[] {
                        "AndroidPlus",
                        "AndroidWork",
                        "autogenerate {guid}.ProfileName"});
#line 24
testRunner.Given("I started creation of a profile with properties:", ((string)(null)), table4, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "CertificateId"});
            table5.AddRow(new string[] {
                        "{guid}.Certificate1"});
#line 27
 testRunner.And("I added a Certificates payload as follows:", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Account Name",
                        "Server",
                        "Enable S/MIME",
                        "Signing Certificate",
                        "Encryption Certificate"});
            table6.AddRow(new string[] {
                        "autogenerate {guid}.AccountName",
                        "sotidev.com",
                        "true",
                        "{guid}.SigningCertificate",
                        "{guid}.EncryptionCertificate"});
#line 30
 testRunner.And("I added Email Configuration palyload as follows:", ((string)(null)), table6, "And ");
#line 33
 testRunner.And("I saved the profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "TargetDevice",
                        "TargetGroup"});
            table7.AddRow(new string[] {
                        "{guid}.ProfileName",
                        "{guid}.DeviceId",
                        ""});
#line 34
testRunner.When("I assign the profiles as follows:", ((string)(null)), table7, "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "DeviceId",
                        "ProfileStatus"});
            table8.AddRow(new string[] {
                        "{guid}.ProfileName",
                        "{guid}.DeviceId",
                        "Installed"});
#line 37
testRunner.Then("The status of the profile is as follows:", ((string)(null)), table8, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Account Name",
                        "Server",
                        "Enable S/MIME",
                        "Signing Certificate",
                        "Encryption Certificate"});
            table9.AddRow(new string[] {
                        "autogenerate {guid}.AccountName",
                        "sotidev.com",
                        "true",
                        "{guid}.SigningCertificate",
                        "{guid}.EncryptionCertificate"});
#line 40
 testRunner.And("values of the Email Configurations are as follows", ((string)(null)), table9, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create and assign a profile with an email configuration containing Maximum attach" +
            "ment size payload")]
        [NUnit.Framework.IgnoreAttribute()]
        public virtual void CreateAndAssignAProfileWithAnEmailConfigurationContainingMaximumAttachmentSizePayload()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create and assign a profile with an email configuration containing Maximum attach" +
                    "ment size payload", new string[] {
                        "Ignore"});
#line 47
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Platform",
                        "Type",
                        "Name"});
            table10.AddRow(new string[] {
                        "AndroidPlus",
                        "AndroidWork",
                        "autogenerate {guid}.ProfileName"});
#line 48
testRunner.Given("I started creation of a profile with properties:", ((string)(null)), table10, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Account Name",
                        "Server",
                        "MaximumAttachmentSize"});
            table11.AddRow(new string[] {
                        "autogenerate {guid}.AccountName",
                        "sotidev.com",
                        "1024"});
#line 51
 testRunner.And("I added Email Configuration payload as follows:", ((string)(null)), table11, "And ");
#line 54
 testRunner.And("I saved the profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "TargetDevice",
                        "TargetGroup"});
            table12.AddRow(new string[] {
                        "{guid}.ProfileName",
                        "{guid}.DeviceId",
                        ""});
#line 55
testRunner.When("I assign the profiles as follows:", ((string)(null)), table12, "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "DeviceId",
                        "ProfileStatus"});
            table13.AddRow(new string[] {
                        "{guid}.ProfileName",
                        "{guid}.DeviceId",
                        "Installed"});
#line 58
testRunner.Then("The status of the profile is as follows:", ((string)(null)), table13, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Account Name",
                        "Server",
                        "MaximumAttachmentSize"});
            table14.AddRow(new string[] {
                        "autogenerate {guid}.AccountName",
                        "sotidev.com",
                        "1024"});
#line 61
 testRunner.And("values of the Email Configurations are as follows", ((string)(null)), table14, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create and assign a profile with an email configuration payload containing Enable" +
            " Tasks set to True")]
        [NUnit.Framework.IgnoreAttribute()]
        public virtual void CreateAndAssignAProfileWithAnEmailConfigurationPayloadContainingEnableTasksSetToTrue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create and assign a profile with an email configuration payload containing Enable" +
                    " Tasks set to True", new string[] {
                        "Ignore"});
#line 68
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Platform",
                        "Type",
                        "Name"});
            table15.AddRow(new string[] {
                        "AndroidPlus",
                        "AndroidWork",
                        "autogenerate {guid}.ProfileName"});
#line 69
testRunner.Given("I started creation of a profile with properties:", ((string)(null)), table15, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Account Name",
                        "Server",
                        "EnableTasks"});
            table16.AddRow(new string[] {
                        "autogenerate {guid}.AccountName",
                        "sotidev.com",
                        "True"});
#line 72
 testRunner.And("I added Email Configuration payload as follows:", ((string)(null)), table16, "And ");
#line 75
 testRunner.And("I saved the profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "TargetDevice",
                        "TargetGroup"});
            table17.AddRow(new string[] {
                        "{guid}.ProfileName",
                        "{guid}.DeviceId",
                        ""});
#line 76
testRunner.When("I assign the profiles as follows:", ((string)(null)), table17, "When ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "DeviceId",
                        "ProfileStatus"});
            table18.AddRow(new string[] {
                        "{guid}.ProfileName",
                        "{guid}.DeviceId",
                        "Installed"});
#line 79
testRunner.Then("The status of the profile is as follows:", ((string)(null)), table18, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Account Name",
                        "Server",
                        "EnableTasks"});
            table19.AddRow(new string[] {
                        "autogenerate {guid}.AccountName",
                        "sotidev.com",
                        "True"});
#line 82
 testRunner.And("values of the Email Configurations are as follows", ((string)(null)), table19, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create and assign a profile with an email configuration payload containing Enable" +
            " Tasks set to False")]
        [NUnit.Framework.IgnoreAttribute()]
        public virtual void CreateAndAssignAProfileWithAnEmailConfigurationPayloadContainingEnableTasksSetToFalse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create and assign a profile with an email configuration payload containing Enable" +
                    " Tasks set to False", new string[] {
                        "Ignore"});
#line 87
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Platform",
                        "Type",
                        "Name"});
            table20.AddRow(new string[] {
                        "AndroidPlus",
                        "AndroidWork",
                        "autogenerate {guid}.ProfileName"});
#line 88
testRunner.Given("I started creation of a profile with properties:", ((string)(null)), table20, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Account Name",
                        "Server",
                        "EnableTasks"});
            table21.AddRow(new string[] {
                        "autogenerate {guid}.AccountName",
                        "sotidev.com",
                        "False"});
#line 91
 testRunner.And("I added Email Configuration payload as follows:", ((string)(null)), table21, "And ");
#line 94
 testRunner.And("I saved the profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "TargetDevice",
                        "TargetGroup"});
            table22.AddRow(new string[] {
                        "{guid}.ProfileName",
                        "{guid}.DeviceId",
                        ""});
#line 95
testRunner.When("I assign the profiles as follows:", ((string)(null)), table22, "When ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "DeviceId",
                        "ProfileStatus"});
            table23.AddRow(new string[] {
                        "{guid}.ProfileName",
                        "{guid}.DeviceId",
                        "Installed"});
#line 98
testRunner.Then("The status of the profile is as follows:", ((string)(null)), table23, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Account Name",
                        "Server",
                        "EnableTasks"});
            table24.AddRow(new string[] {
                        "autogenerate {guid}.AccountName",
                        "sotidev.com",
                        "False"});
#line 101
 testRunner.And("values of the Email Configurations are as follows", ((string)(null)), table24, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
