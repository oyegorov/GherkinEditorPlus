// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Soti.MobiControl.Bdd.PublicApiTests.Features.AndroidWork
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DfcSharingAcrossProfiles")]
    public partial class DfcSharingAcrossProfilesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DfcSharingAcrossProfiles.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DfcSharingAcrossProfiles", "In order to control a user\'s ability to share content to apps across their Work a" +
                    "nd Personal profiles\nAs an Adminstrator\nI want to install a profile containing a" +
                    " Sharing Across Profiles feature control payload", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Server",
                        "UserName",
                        "Password",
                        "Base DN"});
            table1.AddRow(new string[] {
                        "autogenerate {guid}.LdapConnection",
                        "corp.soti.net",
                        "testuser2",
                        "Bonjour321",
                        "DC=corp,DC=soti,DC=net"});
#line 8
 testRunner.And("I have configured LDAP connection as follows:", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "DeviceFamily",
                        "TargetGroups",
                        "LdapConnection",
                        "Priority"});
            table2.AddRow(new string[] {
                        "autogenerate {guid}.RuleName",
                        "AndroidPlus",
                        "\\My Company",
                        "{guid}.LdapConnection",
                        "Normal"});
#line 11
 testRunner.And("I created an AfW rule as follows:", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "AddDeviceRuleName",
                        "DeviceId",
                        "DeviceIp",
                        "LdapUserName",
                        "LdapUserPassword"});
            table3.AddRow(new string[] {
                        "{guid}.RuleName",
                        "autogenerate {guid}",
                        "127.0.0.1",
                        "testuser2",
                        "Bonjour321"});
#line 15
 testRunner.And("I enroll an AfW device with configuration as follows:", ((string)(null)), table3, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Sharing Across Profiles - Enabled feature control payload")]
        [NUnit.Framework.IgnoreAttribute()]
        public virtual void SharingAcrossProfiles_EnabledFeatureControlPayload()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sharing Across Profiles - Enabled feature control payload", new string[] {
                        "ignore"});
#line 20
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "DFCOption",
                        "Value"});
            table4.AddRow(new string[] {
                        "Sharing Across Profiles Test",
                        "Sharing Across Profiles",
                        "Enabled"});
#line 21
testRunner.When("I create a profile for a platfrom \'AndroidWork\' with \'Feature Control\' payloads a" +
                    "s follows:", ((string)(null)), table4, "When ");
#line 24
testRunner.Then("The profile is created with the properties as specified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 25
 testRunner.And("Users should be able to share to personal or work apps that support the Sharing f" +
                    "eature", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Sharing Across Profiles - Disabled from Personal to work feature control payload")]
        [NUnit.Framework.IgnoreAttribute()]
        public virtual void SharingAcrossProfiles_DisabledFromPersonalToWorkFeatureControlPayload()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sharing Across Profiles - Disabled from Personal to work feature control payload", new string[] {
                        "ignore"});
#line 28
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "DFCOption",
                        "Value"});
            table5.AddRow(new string[] {
                        "Sharing Across Profiles Test",
                        "Sharing Across Profiles",
                        "Disabled from Personal to Work Only"});
#line 29
testRunner.When("I create a profile for a platfrom \'AndroidWork\' with \'Feature Control\' payloads a" +
                    "s follows:", ((string)(null)), table5, "When ");
#line 32
testRunner.Then("The profile is created with the properties as specified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 33
 testRunner.And("Users can share from Work to Work apps", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
 testRunner.And("Users can share from Work to Personal apps", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.And("Users cannot share from Personal to Work apps", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Sharing Across Profiles - Disabled from Work to Personal Only feature control pay" +
            "load")]
        [NUnit.Framework.IgnoreAttribute()]
        public virtual void SharingAcrossProfiles_DisabledFromWorkToPersonalOnlyFeatureControlPayload()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sharing Across Profiles - Disabled from Work to Personal Only feature control pay" +
                    "load", new string[] {
                        "ignore"});
#line 38
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "DFCOption",
                        "Value"});
            table6.AddRow(new string[] {
                        "Sharing Across Profiles Test",
                        "Sharing Across Profiles",
                        "Disabled from Work to Personal Only"});
#line 39
testRunner.When("I create a profile for a platfrom \'AndroidWork\' with \'Feature Control\' payloads a" +
                    "s follows:", ((string)(null)), table6, "When ");
#line 42
testRunner.Then("The profile is created with the properties as specified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 43
 testRunner.And("Users can share from Personal to Personal apps", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
 testRunner.And("Users can share from Personal to work apps", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
 testRunner.And("Users cannot share from Personal to Work apps", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Sharing Across Profiles - Disabled feature control payload")]
        [NUnit.Framework.IgnoreAttribute()]
        public virtual void SharingAcrossProfiles_DisabledFeatureControlPayload()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sharing Across Profiles - Disabled feature control payload", new string[] {
                        "ignore"});
#line 48
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "DFCOption",
                        "Value"});
            table7.AddRow(new string[] {
                        "Sharing Across Profiles Test",
                        "Sharing Across Profiles",
                        "Disabled"});
#line 49
testRunner.When("I create a profile for a platfrom \'AndroidWork\' with \'Feature Control\' payloads a" +
                    "s follows:", ((string)(null)), table7, "When ");
#line 52
testRunner.Then("The profile is created with the properties as specified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 53
 testRunner.And("Users can only share from Personal to Personal or Work to Work", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
 testRunner.And("Users cannot share across profiles", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
