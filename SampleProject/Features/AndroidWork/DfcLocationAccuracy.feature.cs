// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Soti.MobiControl.Bdd.PublicApiTests.Features.AndroidWork
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DfcLocationAccuracy")]
    [NUnit.Framework.IgnoreAttribute()]
    public partial class DfcLocationAccuracyFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DfcLocationAccuracy.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DfcLocationAccuracy", "  In order to better manage my ability to locate a desired device in the future\r\n" +
                    "  As an administrator\r\n  I want to install a profile containing a Location Accur" +
                    "acy feature control payload", ProgrammingLanguage.CSharp, new string[] {
                        "ignore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line 8
testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "DeviceFamily",
                        "TargetGroups",
                        "Priority"});
            table1.AddRow(new string[] {
                        "autogenerate {guid}.RuleName",
                        "AndroidPlus",
                        "\\My Company",
                        "Normal"});
#line 9
     testRunner.And("I have created an Android+ add device rule as follows:", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "AddDeviceRuleName",
                        "DeviceId"});
            table2.AddRow(new string[] {
                        "{guid}.RuleName",
                        "autogenerate {guid}.DeviceId"});
#line 12
    testRunner.And("I have enrolled an AfW device configured as follows:", ((string)(null)), table2, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create and assign a profile containing a feature control payload with Location Ac" +
            "curacy set to <\'Location Accuracy Value\'>")]
        [NUnit.Framework.IgnoreAttribute()]
        [NUnit.Framework.TestCaseAttribute("NotImposed", null)]
        [NUnit.Framework.TestCaseAttribute("Disabled", null)]
        [NUnit.Framework.TestCaseAttribute("HighAccuracy", null)]
        [NUnit.Framework.TestCaseAttribute("GPSOnly", null)]
        [NUnit.Framework.TestCaseAttribute("BatterySaving", null)]
        public virtual void CreateAndAssignAProfileContainingAFeatureControlPayloadWithLocationAccuracySetToLocationAccuracyValue(string locationAccuracyValue, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create and assign a profile containing a feature control payload with Location Ac" +
                    "curacy set to <\'Location Accuracy Value\'>", @__tags);
#line 18
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Platform",
                        "ProfileType",
                        "ProfileName",
                        "RestrictionName",
                        "RestrictionValue"});
            table3.AddRow(new string[] {
                        "AndroidPlus",
                        "AndroidWork",
                        "autogenerate {guid}.ProfileName",
                        "LocationAccuracy",
                        string.Format("{0}", locationAccuracyValue)});
#line 19
testRunner.Given("I have created profiles with the DFC payload as follows:", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "TargetDevice",
                        "TargetGroup"});
            table4.AddRow(new string[] {
                        "{guid}.ProfileName",
                        "{guid}.DeviceId",
                        ""});
#line 22
testRunner.When("I assign the profiles as follows:", ((string)(null)), table4, "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "DeviceId",
                        "ProfileStatus"});
            table5.AddRow(new string[] {
                        "{guid}.ProfileName",
                        "{guid}.DeviceId",
                        "Installed"});
#line 25
testRunner.Then("The statuses of the profiles are as follows:", ((string)(null)), table5, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId",
                        "RestrictionName",
                        "RestrictionValue"});
            table6.AddRow(new string[] {
                        "{guid}.DeviceId",
                        "LocationAccuracy",
                        string.Format("{0}", locationAccuracyValue)});
#line 28
    testRunner.And("The values of the DFC restrictions are as follows:", ((string)(null)), table6, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create and assign 5 conflicting profiles containing all different Location Accura" +
            "cy values")]
        [NUnit.Framework.IgnoreAttribute()]
        public virtual void CreateAndAssign5ConflictingProfilesContainingAllDifferentLocationAccuracyValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create and assign 5 conflicting profiles containing all different Location Accura" +
                    "cy values", new string[] {
                        "ignore"});
#line 43
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Platform",
                        "ProfileType",
                        "ProfileName",
                        "RestrictionName",
                        "RestrictionValue"});
            table7.AddRow(new string[] {
                        "AndroidPlus",
                        "AndroidWork",
                        "autogenerate {guid}.ProfileName1",
                        "LocationAccuracy",
                        "NotImposed"});
            table7.AddRow(new string[] {
                        "AndroidPlus",
                        "AndroidWork",
                        "autogenerate {guid}.ProfileName2",
                        "LocationAccuracy",
                        "Disabled"});
            table7.AddRow(new string[] {
                        "AndroidPlus",
                        "AndroidWork",
                        "autogenerate {guid}.ProfileName3",
                        "LocationAccuracy",
                        "HighAccuracy"});
            table7.AddRow(new string[] {
                        "AndroidPlus",
                        "AndroidWork",
                        "autogenerate {guid}.ProfileName4",
                        "LocationAccuracy",
                        "GPSOnly"});
            table7.AddRow(new string[] {
                        "AndroidPlus",
                        "AndroidWork",
                        "autogenerate {guid}.ProfileName5",
                        "LocationAccuracy",
                        "BatterySaving"});
#line 44
testRunner.Given("I have created profiles with the DFC payload as follows:", ((string)(null)), table7, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "TargetDevice",
                        "TargetGroup"});
            table8.AddRow(new string[] {
                        "{guid}.ProfileName1",
                        "{guid}.DeviceId",
                        ""});
            table8.AddRow(new string[] {
                        "{guid}.ProfileName2",
                        "{guid}.DeviceId",
                        ""});
            table8.AddRow(new string[] {
                        "{guid}.ProfileName3",
                        "{guid}.DeviceId",
                        ""});
            table8.AddRow(new string[] {
                        "{guid}.ProfileName4",
                        "{guid}.DeviceId",
                        ""});
            table8.AddRow(new string[] {
                        "{guid}.ProfileName5",
                        "{guid}.DeviceId",
                        ""});
#line 51
testRunner.When("I assign the profiles as follows:", ((string)(null)), table8, "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "DeviceId",
                        "ProfileStatus"});
            table9.AddRow(new string[] {
                        "{guid}.ProfileName1",
                        "{guid}.DeviceId",
                        "Installed"});
            table9.AddRow(new string[] {
                        "{guid}.ProfileName2",
                        "{guid}.DeviceId",
                        "Installed"});
            table9.AddRow(new string[] {
                        "{guid}.ProfileName3",
                        "{guid}.DeviceId",
                        "Installed"});
            table9.AddRow(new string[] {
                        "{guid}.ProfileName4",
                        "{guid}.DeviceId",
                        "Installed"});
            table9.AddRow(new string[] {
                        "{guid}.ProfileName5",
                        "{guid}.DeviceId",
                        "Installed"});
#line 58
testRunner.Then("The statuses of the profiles are as follows:", ((string)(null)), table9, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId",
                        "RestrictionName",
                        "RestrictionValue"});
            table10.AddRow(new string[] {
                        "{guid}.DeviceId",
                        "LocationAccuracy",
                        "Disabled"});
#line 65
    testRunner.And("The values of the DFC restrictions are as follows:", ((string)(null)), table10, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create and assign 4 conflicting profiles containing all different Location Accura" +
            "cy values")]
        [NUnit.Framework.IgnoreAttribute()]
        public virtual void CreateAndAssign4ConflictingProfilesContainingAllDifferentLocationAccuracyValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create and assign 4 conflicting profiles containing all different Location Accura" +
                    "cy values", new string[] {
                        "ignore"});
#line 70
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Platform",
                        "ProfileType",
                        "ProfileName",
                        "RestrictionName",
                        "RestrictionValue"});
            table11.AddRow(new string[] {
                        "AndroidPlus",
                        "AndroidWork",
                        "autogenerate {guid}.ProfileName1",
                        "LocationAccuracy",
                        "NotImposed"});
            table11.AddRow(new string[] {
                        "AndroidPlus",
                        "AndroidWork",
                        "autogenerate {guid}.ProfileName2",
                        "LocationAccuracy",
                        "HighAccuracy"});
            table11.AddRow(new string[] {
                        "AndroidPlus",
                        "AndroidWork",
                        "autogenerate {guid}.ProfileName3",
                        "LocationAccuracy",
                        "GPSOnly"});
            table11.AddRow(new string[] {
                        "AndroidPlus",
                        "AndroidWork",
                        "autogenerate {guid}.ProfileName4",
                        "LocationAccuracy",
                        "BatterySaving"});
#line 71
testRunner.Given("I have created profiles with the DFC payload as follows:", ((string)(null)), table11, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "TargetDevice",
                        "TargetGroup"});
            table12.AddRow(new string[] {
                        "{guid}.ProfileName1",
                        "{guid}.DeviceId",
                        ""});
            table12.AddRow(new string[] {
                        "{guid}.ProfileName2",
                        "{guid}.DeviceId",
                        ""});
            table12.AddRow(new string[] {
                        "{guid}.ProfileName3",
                        "{guid}.DeviceId",
                        ""});
#line 77
testRunner.When("I assign the profiles as follows:", ((string)(null)), table12, "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "DeviceId",
                        "ProfileStatus"});
            table13.AddRow(new string[] {
                        "{guid}.ProfileName1",
                        "{guid}.DeviceId",
                        "Installed"});
            table13.AddRow(new string[] {
                        "{guid}.ProfileName2",
                        "{guid}.DeviceId",
                        "Installed"});
            table13.AddRow(new string[] {
                        "{guid}.ProfileName3",
                        "{guid}.DeviceId",
                        "Installed"});
#line 82
testRunner.Then("The statuses of the profiles are as follows:", ((string)(null)), table13, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId",
                        "RestrictionName",
                        "RestrictionValue"});
            table14.AddRow(new string[] {
                        "{guid}.DeviceId",
                        "LocationAccuracy",
                        "HighAccuracy"});
#line 87
    testRunner.And("The values of the DFC restrictions are as follows:", ((string)(null)), table14, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create and assign 3 conflicting profiles containing all different Location Accura" +
            "cy values")]
        [NUnit.Framework.IgnoreAttribute()]
        public virtual void CreateAndAssign3ConflictingProfilesContainingAllDifferentLocationAccuracyValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create and assign 3 conflicting profiles containing all different Location Accura" +
                    "cy values", new string[] {
                        "ignore"});
#line 92
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Platform",
                        "ProfileType",
                        "ProfileName",
                        "RestrictionName",
                        "RestrictionValue"});
            table15.AddRow(new string[] {
                        "AndroidPlus",
                        "AndroidWork",
                        "autogenerate {guid}.ProfileName1",
                        "LocationAccuracy",
                        "NotImposed"});
            table15.AddRow(new string[] {
                        "AndroidPlus",
                        "AndroidWork",
                        "autogenerate {guid}.ProfileName2",
                        "LocationAccuracy",
                        "GPSOnly"});
            table15.AddRow(new string[] {
                        "AndroidPlus",
                        "AndroidWork",
                        "autogenerate {guid}.ProfileName3",
                        "LocationAccuracy",
                        "BatterySaving"});
#line 93
testRunner.Given("I have created profiles with the DFC payload as follows:", ((string)(null)), table15, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "TargetDevice",
                        "TargetGroup"});
            table16.AddRow(new string[] {
                        "{guid}.ProfileName1",
                        "{guid}.DeviceId",
                        ""});
            table16.AddRow(new string[] {
                        "{guid}.ProfileName2",
                        "{guid}.DeviceId",
                        ""});
#line 98
testRunner.When("I assign the profiles as follows:", ((string)(null)), table16, "When ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "DeviceId",
                        "ProfileStatus"});
            table17.AddRow(new string[] {
                        "{guid}.ProfileName1",
                        "{guid}.DeviceId",
                        "Installed"});
            table17.AddRow(new string[] {
                        "{guid}.ProfileName2",
                        "{guid}.DeviceId",
                        "Installed"});
#line 102
testRunner.Then("The statuses of the profiles are as follows:", ((string)(null)), table17, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId",
                        "RestrictionName",
                        "RestrictionValue"});
            table18.AddRow(new string[] {
                        "{guid}.DeviceId",
                        "LocationAccuracy",
                        "GPSOnly"});
#line 106
    testRunner.And("The values of the DFC restrictions are as follows:", ((string)(null)), table18, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create and assign 2 conflicting profiles containing all different Location Accura" +
            "cy values")]
        [NUnit.Framework.IgnoreAttribute()]
        public virtual void CreateAndAssign2ConflictingProfilesContainingAllDifferentLocationAccuracyValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create and assign 2 conflicting profiles containing all different Location Accura" +
                    "cy values", new string[] {
                        "ignore"});
#line 111
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Platform",
                        "ProfileType",
                        "ProfileName",
                        "RestrictionName",
                        "RestrictionValue"});
            table19.AddRow(new string[] {
                        "AndroidPlus",
                        "AndroidWork",
                        "autogenerate {guid}.ProfileName1",
                        "LocationAccuracy",
                        "NotImposed"});
            table19.AddRow(new string[] {
                        "AndroidPlus",
                        "AndroidWork",
                        "autogenerate {guid}.ProfileName2",
                        "LocationAccuracy",
                        "BatterySaving"});
#line 112
testRunner.Given("I have created profiles with the DFC payload as follows:", ((string)(null)), table19, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "TargetDevice",
                        "TargetGroup"});
            table20.AddRow(new string[] {
                        "{guid}.ProfileName1",
                        "{guid}.DeviceId",
                        ""});
            table20.AddRow(new string[] {
                        "{guid}.ProfileName2",
                        "{guid}.DeviceId",
                        ""});
#line 116
testRunner.When("I assign the profiles as follows:", ((string)(null)), table20, "When ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "DeviceId",
                        "ProfileStatus"});
            table21.AddRow(new string[] {
                        "{guid}.ProfileName1",
                        "{guid}.DeviceId",
                        "Installed"});
            table21.AddRow(new string[] {
                        "{guid}.ProfileName2",
                        "{guid}.DeviceId",
                        "Installed"});
#line 120
testRunner.Then("The statuses of the profiles are as follows:", ((string)(null)), table21, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId",
                        "RestrictionName",
                        "RestrictionValue"});
            table22.AddRow(new string[] {
                        "{guid}.DeviceId",
                        "LocationAccuracy",
                        "BatterySaving"});
#line 124
    testRunner.And("The values of the DFC restrictions are as follows:", ((string)(null)), table22, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
