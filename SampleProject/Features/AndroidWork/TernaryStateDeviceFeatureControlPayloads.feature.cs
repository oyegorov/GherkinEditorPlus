// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Soti.MobiControl.Bdd.PublicApiTests.Features.AndroidWork
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Android for Work: Ternary state device feature control payloads")]
    [NUnit.Framework.IgnoreAttribute()]
    public partial class AndroidForWorkTernaryStateDeviceFeatureControlPayloadsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TernaryStateDeviceFeatureControlPayloads.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Android for Work: Ternary state device feature control payloads", @"  In order to control the end user's ability to use a particular device feature,
  as an Administrator I want to install one or more profiles containing respective device feature control (DFC) payloads.
  The purpose of this test is to ensure that the Deployment Server sends the correct data to the AfW Agent.", ProgrammingLanguage.CSharp, new string[] {
                        "ignore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line 8
testRunner.Given("I am a user with the name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "DeviceFamily",
                        "TargetGroups",
                        "Priority"});
            table1.AddRow(new string[] {
                        "autogenerate {guid}.RuleName",
                        "AndroidPlus",
                        "\\My Company",
                        "Normal"});
#line 9
    testRunner.And("I have created an Android+ add device rule as follows:", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "AddDeviceRuleName",
                        "DeviceId"});
            table2.AddRow(new string[] {
                        "{guid}.RuleName",
                        "autogenerate {guid}.DeviceId"});
#line 12
    testRunner.And("I have enrolled an AfW device configured as follows:", ((string)(null)), table2, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create and assign one profile containing a specified DFC payload with the value \'" +
            "Enabled\'")]
        [NUnit.Framework.IgnoreAttribute()]
        [NUnit.Framework.TestCaseAttribute("StayAwakeWhileCharging", null)]
        [NUnit.Framework.TestCaseAttribute("DisableUsbDebugging", null)]
        [NUnit.Framework.TestCaseAttribute("BluetoothState", null)]
        [NUnit.Framework.TestCaseAttribute("WifiState", null)]
        [NUnit.Framework.TestCaseAttribute("DataRoamingState", null)]
        public virtual void CreateAndAssignOneProfileContainingASpecifiedDFCPayloadWithTheValueEnabled(string restrictionName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create and assign one profile containing a specified DFC payload with the value \'" +
                    "Enabled\'", @__tags);
#line 18
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Platform",
                        "Type",
                        "Name"});
            table3.AddRow(new string[] {
                        "AndroidPlus",
                        "AndroidWork",
                        "autogenerate {guid}.ProfileName"});
#line 19
testRunner.Given("I started creation of a profile with properties:", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "RestrictionName",
                        "RestrictionValue"});
            table4.AddRow(new string[] {
                        "<Restrictions>",
                        "Enabled"});
#line 22
 testRunner.And("I added DFC payload configured as follow", ((string)(null)), table4, "And ");
#line 25
 testRunner.And("I saved the profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "TargetDevice",
                        "TargetGroup"});
            table5.AddRow(new string[] {
                        "{guid}.ProfileName",
                        "{guid}.DeviceI",
                        ""});
#line 26
testRunner.When("I assign the profiles as follows:", ((string)(null)), table5, "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "DeviceId",
                        "ProfileStatus"});
            table6.AddRow(new string[] {
                        "{guid}.ProfileName",
                        "{guid}.DeviceId",
                        "Installed"});
#line 29
testRunner.Then("The statuses of the profiles are as follows:", ((string)(null)), table6, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId",
                        "RestrictionName",
                        "RestrictionValue"});
            table7.AddRow(new string[] {
                        "{guid}.DeviceId",
                        string.Format("{0}", restrictionName),
                        "Enabled"});
#line 32
    testRunner.And("The values of the DFC restrictions are as follows:", ((string)(null)), table7, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create and assign one profile containing a specified DFC payload with the value \'" +
            "Disabled\'")]
        [NUnit.Framework.IgnoreAttribute()]
        [NUnit.Framework.TestCaseAttribute("StayAwakeWhileCharging", null)]
        [NUnit.Framework.TestCaseAttribute("DisableUsbDebugging", null)]
        [NUnit.Framework.TestCaseAttribute("BluetoothState", null)]
        [NUnit.Framework.TestCaseAttribute("WifiState", null)]
        [NUnit.Framework.TestCaseAttribute("DataRoamingState", null)]
        public virtual void CreateAndAssignOneProfileContainingASpecifiedDFCPayloadWithTheValueDisabled(string restrictionName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create and assign one profile containing a specified DFC payload with the value \'" +
                    "Disabled\'", @__tags);
#line 44
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Platform",
                        "Type",
                        "Name"});
            table8.AddRow(new string[] {
                        "AndroidPlus",
                        "AndroidWork",
                        "autogenerate {guid}.ProfileName"});
#line 45
testRunner.Given("I started creation of a profile with properties:", ((string)(null)), table8, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "RestrictionName",
                        "RestrictionValue"});
            table9.AddRow(new string[] {
                        string.Format("{0}", restrictionName),
                        "Disabled"});
#line 48
 testRunner.And("I added DFC payload configured as follow", ((string)(null)), table9, "And ");
#line 51
 testRunner.And("I saved the profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "TargetDevice",
                        "TargetGroup"});
            table10.AddRow(new string[] {
                        "{guid}.ProfileName",
                        "{guid}.DeviceI",
                        ""});
#line 52
testRunner.When("I assign the profiles as follows:", ((string)(null)), table10, "When ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "DeviceId",
                        "ProfileStatus"});
            table11.AddRow(new string[] {
                        "{guid}.ProfileName",
                        "{guid}.DeviceId",
                        "Installed"});
#line 55
testRunner.Then("The statuses of the profiles are as follows:", ((string)(null)), table11, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId",
                        "RestrictionName",
                        "RestrictionValue"});
            table12.AddRow(new string[] {
                        "{guid}.DeviceId",
                        string.Format("{0}", restrictionName),
                        "Disabled"});
#line 58
    testRunner.And("The values of the DFC restrictions are as follows:", ((string)(null)), table12, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create and assign one profile containing a specified DFC payload with the value \'" +
            "Allow User to Configure\'(NotImposed)")]
        [NUnit.Framework.IgnoreAttribute()]
        [NUnit.Framework.TestCaseAttribute("StayAwakeWhileCharging", null)]
        [NUnit.Framework.TestCaseAttribute("DisableUsbDebugging", null)]
        [NUnit.Framework.TestCaseAttribute("BluetoothState", null)]
        [NUnit.Framework.TestCaseAttribute("WifiState", null)]
        [NUnit.Framework.TestCaseAttribute("DataRoamingState", null)]
        public virtual void CreateAndAssignOneProfileContainingASpecifiedDFCPayloadWithTheValueAllowUserToConfigureNotImposed(string restrictionName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create and assign one profile containing a specified DFC payload with the value \'" +
                    "Allow User to Configure\'(NotImposed)", @__tags);
#line 70
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Platform",
                        "Type",
                        "Name"});
            table13.AddRow(new string[] {
                        "AndroidPlus",
                        "AndroidWork",
                        "autogenerate {guid}.ProfileName"});
#line 71
testRunner.Given("I started creation of a profile with properties:", ((string)(null)), table13, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "RestrictionName",
                        "RestrictionValue"});
            table14.AddRow(new string[] {
                        string.Format("{0}", restrictionName),
                        "NotImposed"});
#line 74
 testRunner.And("I added DFC payload configured as follow", ((string)(null)), table14, "And ");
#line 77
 testRunner.And("I saved the profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "TargetDevice",
                        "TargetGroup"});
            table15.AddRow(new string[] {
                        "{guid}.ProfileName",
                        "{guid}.DeviceI",
                        ""});
#line 78
testRunner.When("I assign the profiles as follows:", ((string)(null)), table15, "When ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "DeviceId",
                        "ProfileStatus"});
            table16.AddRow(new string[] {
                        "{guid}.ProfileName",
                        "{guid}.DeviceId",
                        "Installed"});
#line 81
testRunner.Then("The statuses of the profiles are as follows:", ((string)(null)), table16, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId",
                        "RestrictionName",
                        "RestrictionValue"});
            table17.AddRow(new string[] {
                        "{guid}.DeviceId",
                        string.Format("{0}", restrictionName),
                        "NotImposed"});
#line 84
    testRunner.And("The values of the DFC restrictions are as follows:", ((string)(null)), table17, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create and assign two conflicting profiles containing a specified DFC payload wit" +
            "h the values \'Disabled\' and \'Enabled\' and \'Allow User to Configure\' (NotImposed)" +
            "")]
        [NUnit.Framework.IgnoreAttribute()]
        [NUnit.Framework.TestCaseAttribute("StayAwakeWhileCharging", null)]
        [NUnit.Framework.TestCaseAttribute("DisableUsbDebugging", null)]
        [NUnit.Framework.TestCaseAttribute("BluetoothState", null)]
        [NUnit.Framework.TestCaseAttribute("WifiState", null)]
        [NUnit.Framework.TestCaseAttribute("DataRoamingState", null)]
        public virtual void CreateAndAssignTwoConflictingProfilesContainingASpecifiedDFCPayloadWithTheValuesDisabledAndEnabledAndAllowUserToConfigureNotImposed(string restrictionName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create and assign two conflicting profiles containing a specified DFC payload wit" +
                    "h the values \'Disabled\' and \'Enabled\' and \'Allow User to Configure\' (NotImposed)" +
                    "", @__tags);
#line 98
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Platform",
                        "Type",
                        "Name"});
            table18.AddRow(new string[] {
                        "AndroidPlus",
                        "AndroidWork",
                        "autogenerate {guid}.ProfileName1"});
#line 99
testRunner.Given("I started creation of a profile with properties:", ((string)(null)), table18, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "RestrictionName",
                        "RestrictionValue"});
            table19.AddRow(new string[] {
                        string.Format("{0}", restrictionName),
                        "Disabled"});
#line 102
 testRunner.And("I added DFC payload configured as follow", ((string)(null)), table19, "And ");
#line 105
 testRunner.And("I saved the profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Platform",
                        "Type",
                        "Name"});
            table20.AddRow(new string[] {
                        "AndroidPlus",
                        "AndroidWork",
                        "autogenerate {guid}.ProfileName2"});
#line 107
 testRunner.And("I started creation of a profile with properties:", ((string)(null)), table20, "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "RestrictionName",
                        "RestrictionValue"});
            table21.AddRow(new string[] {
                        string.Format("{0}", restrictionName),
                        "Enabled"});
#line 110
 testRunner.And("I added DFC payload configured as follow", ((string)(null)), table21, "And ");
#line 113
 testRunner.And("I saved the profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Platform",
                        "Type",
                        "Name"});
            table22.AddRow(new string[] {
                        "AndroidPlus",
                        "AndroidWork",
                        "autogenerate {guid}.ProfileName3"});
#line 115
 testRunner.And("I started creation of a profile with properties:", ((string)(null)), table22, "And ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "RestrictionName",
                        "RestrictionValue"});
            table23.AddRow(new string[] {
                        string.Format("{0}", restrictionName),
                        "NotImposed"});
#line 118
 testRunner.And("I added DFC payload configured as follow", ((string)(null)), table23, "And ");
#line 121
 testRunner.And("I saved the profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "DeviceId"});
            table24.AddRow(new string[] {
                        "{guid}.ProfileName1",
                        "{guid}.DeviceId"});
            table24.AddRow(new string[] {
                        "{guid}.ProfileName2",
                        "{guid}.DeviceId"});
            table24.AddRow(new string[] {
                        "{guid}.ProfileName3",
                        "{guid}.DeviceId"});
#line 122
testRunner.When("I assign the profiles as follow:", ((string)(null)), table24, "When ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "DeviceId",
                        "ProfileStatus"});
            table25.AddRow(new string[] {
                        "{guid}.ProfileName1",
                        "{guid}.DeviceId",
                        "Installed"});
            table25.AddRow(new string[] {
                        "{guid}.ProfileName2",
                        "{guid}.DeviceId",
                        "Installed"});
            table25.AddRow(new string[] {
                        "{guid}.ProfileName3",
                        "{guid}.DeviceId",
                        "Installed"});
#line 127
testRunner.Then("The statuses of the profiles are as follows:", ((string)(null)), table25, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId",
                        "RestrictionName",
                        "RestrictionValue"});
            table26.AddRow(new string[] {
                        "{guid}.DeviceId",
                        string.Format("{0}", restrictionName),
                        "Disabled"});
#line 132
    testRunner.And("The values of the DFC restrictions are as follows:", ((string)(null)), table26, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create and assign two conflicting profiles containing a specified DFC payload wit" +
            "h the values \'Enabled\' and \'Allow User to Configure\'  (NotImposed)")]
        [NUnit.Framework.IgnoreAttribute()]
        [NUnit.Framework.TestCaseAttribute("StayAwakeWhileCharging", null)]
        [NUnit.Framework.TestCaseAttribute("DisableUsbDebugging", null)]
        [NUnit.Framework.TestCaseAttribute("BluetoothState", null)]
        [NUnit.Framework.TestCaseAttribute("WifiState", null)]
        [NUnit.Framework.TestCaseAttribute("DataRoamingState", null)]
        public virtual void CreateAndAssignTwoConflictingProfilesContainingASpecifiedDFCPayloadWithTheValuesEnabledAndAllowUserToConfigureNotImposed(string restrictionName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create and assign two conflicting profiles containing a specified DFC payload wit" +
                    "h the values \'Enabled\' and \'Allow User to Configure\'  (NotImposed)", @__tags);
#line 144
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Platform",
                        "Type",
                        "Name"});
            table27.AddRow(new string[] {
                        "AndroidPlus",
                        "AndroidWork",
                        "autogenerate {guid}.ProfileName1"});
#line 145
testRunner.Given("I started creation of a profile with properties:", ((string)(null)), table27, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "RestrictionName",
                        "RestrictionValue"});
            table28.AddRow(new string[] {
                        string.Format("{0}", restrictionName),
                        "Enabled"});
#line 148
 testRunner.And("I added DFC payload configured as follow", ((string)(null)), table28, "And ");
#line 151
 testRunner.And("I saved the profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Platform",
                        "Type",
                        "Name"});
            table29.AddRow(new string[] {
                        "AndroidPlus",
                        "AndroidWork",
                        "autogenerate {guid}.ProfileName2"});
#line 153
 testRunner.And("I started creation of a profile with properties:", ((string)(null)), table29, "And ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "RestrictionName",
                        "RestrictionValue"});
            table30.AddRow(new string[] {
                        string.Format("{0}", restrictionName),
                        "NotImposed"});
#line 156
 testRunner.And("I added DFC payload configured as follow", ((string)(null)), table30, "And ");
#line 159
 testRunner.And("I saved the profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "DeviceId"});
            table31.AddRow(new string[] {
                        "{guid}.ProfileName1",
                        "{guid}.DeviceId"});
            table31.AddRow(new string[] {
                        "{guid}.ProfileName2",
                        "{guid}.DeviceId"});
#line 160
testRunner.When("I assign the profiles as follow:", ((string)(null)), table31, "When ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "DeviceId",
                        "ProfileStatus"});
            table32.AddRow(new string[] {
                        "{guid}.ProfileName1",
                        "{guid}.DeviceId",
                        "Installed"});
            table32.AddRow(new string[] {
                        "{guid}.ProfileName2",
                        "{guid}.DeviceId",
                        "Installed"});
#line 164
testRunner.Then("The statuses of the profiles are as follows:", ((string)(null)), table32, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId",
                        "RestrictionName",
                        "RestrictionValue"});
            table33.AddRow(new string[] {
                        "{guid}.DeviceId",
                        string.Format("{0}", restrictionName),
                        "Enabled"});
#line 168
    testRunner.And("The values of the DFC restrictions are as follows:", ((string)(null)), table33, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create and assign two conflicting profiles containing a specified DFC payload wit" +
            "h the values \'Enabled\' and \'Disabled\'")]
        [NUnit.Framework.IgnoreAttribute()]
        [NUnit.Framework.TestCaseAttribute("StayAwakeWhileCharging", null)]
        [NUnit.Framework.TestCaseAttribute("DisableUsbDebugging", null)]
        [NUnit.Framework.TestCaseAttribute("BluetoothState", null)]
        [NUnit.Framework.TestCaseAttribute("WifiState", null)]
        [NUnit.Framework.TestCaseAttribute("DataRoamingState", null)]
        public virtual void CreateAndAssignTwoConflictingProfilesContainingASpecifiedDFCPayloadWithTheValuesEnabledAndDisabled(string restrictionName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create and assign two conflicting profiles containing a specified DFC payload wit" +
                    "h the values \'Enabled\' and \'Disabled\'", @__tags);
#line 180
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Platform",
                        "Type",
                        "Name"});
            table34.AddRow(new string[] {
                        "AndroidPlus",
                        "AndroidWork",
                        "autogenerate {guid}.ProfileName1"});
#line 181
testRunner.Given("I started creation of a profile with properties:", ((string)(null)), table34, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "RestrictionName",
                        "RestrictionValue"});
            table35.AddRow(new string[] {
                        string.Format("{0}", restrictionName),
                        "Enabled"});
#line 184
 testRunner.And("I added DFC payload configured as follow", ((string)(null)), table35, "And ");
#line 187
 testRunner.And("I saved the profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Platform",
                        "Type",
                        "Name"});
            table36.AddRow(new string[] {
                        "AndroidPlus",
                        "AndroidWork",
                        "autogenerate {guid}.ProfileName2"});
#line 189
 testRunner.And("I started creation of a profile with properties:", ((string)(null)), table36, "And ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "RestrictionName",
                        "RestrictionValue"});
            table37.AddRow(new string[] {
                        string.Format("{0}", restrictionName),
                        "Disabled"});
#line 192
 testRunner.And("I added DFC payload configured as follow", ((string)(null)), table37, "And ");
#line 195
 testRunner.And("I saved the profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "DeviceId"});
            table38.AddRow(new string[] {
                        "{guid}.ProfileName1",
                        "{guid}.DeviceId"});
            table38.AddRow(new string[] {
                        "{guid}.ProfileName2",
                        "{guid}.DeviceId"});
#line 196
testRunner.When("I assign the profiles as follow:", ((string)(null)), table38, "When ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "DeviceId",
                        "ProfileStatus"});
            table39.AddRow(new string[] {
                        "{guid}.ProfileName1",
                        "{guid}.DeviceId",
                        "Installed"});
            table39.AddRow(new string[] {
                        "{guid}.ProfileName2",
                        "{guid}.DeviceId",
                        "Installed"});
#line 200
testRunner.Then("The statuses of the profiles are as follows:", ((string)(null)), table39, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId",
                        "RestrictionName",
                        "RestrictionValue"});
            table40.AddRow(new string[] {
                        "{guid}.DeviceId",
                        string.Format("{0}", restrictionName),
                        "Disabled"});
#line 204
    testRunner.And("The values of the DFC restrictions are as follows:", ((string)(null)), table40, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
