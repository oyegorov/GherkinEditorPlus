// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Soti.MobiControl.Bdd.PublicApiTests.Features.AndroidWork
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Android for Work: Boolean device feature control payloads")]
    [NUnit.Framework.IgnoreAttribute()]
    public partial class AndroidForWorkBooleanDeviceFeatureControlPayloadsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "BooleanDeviceFeatureControlPayloads.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Android for Work: Boolean device feature control payloads", @"  In order to control the end user's ability to use a particular device feature,
  as an Administrator I want to install one or more profiles containing respective device feature control (DFC) payloads.
  The purpose of this test is to ensure that the Deployment Server sends the correct data to the Android for Work agent.", ProgrammingLanguage.CSharp, new string[] {
                        "ignore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line 8
testRunner.Given("I am a user with the name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "DeviceFamily",
                        "TargetGroups",
                        "Priority"});
            table1.AddRow(new string[] {
                        "autogenerate {guid}.RuleName",
                        "AndroidPlus",
                        "\\My Company",
                        "Normal"});
#line 9
    testRunner.And("I have created an Android+ add device rule as follows:", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "AddDeviceRuleName",
                        "DeviceId"});
            table2.AddRow(new string[] {
                        "{guid}.RuleName",
                        "autogenerate {guid}.DeviceId"});
#line 12
    testRunner.And("I have enrolled an AfW device configured as follows:", ((string)(null)), table2, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create and assign one profile containing a DFC payload with the specified restric" +
            "tion set to False")]
        [NUnit.Framework.IgnoreAttribute()]
        [NUnit.Framework.TestCaseAttribute("DisableAppManagement", null)]
        [NUnit.Framework.TestCaseAttribute("DisableBluetoothContactSharing", null)]
        [NUnit.Framework.TestCaseAttribute("DisableBluetoothManagement", null)]
        [NUnit.Framework.TestCaseAttribute("DisableCamera", null)]
        [NUnit.Framework.TestCaseAttribute("DisableCertificateManagement", null)]
        [NUnit.Framework.TestCaseAttribute("DisableFactoryReset", null)]
        [NUnit.Framework.TestCaseAttribute("DisableFingerprintAuthentication", null)]
        [NUnit.Framework.TestCaseAttribute("DisableInstallationFromUnknownSources", null)]
        [NUnit.Framework.TestCaseAttribute("DisableKeyguardCamera", null)]
        [NUnit.Framework.TestCaseAttribute("DisableLocationSharing", null)]
        [NUnit.Framework.TestCaseAttribute("DisableMultiUser", null)]
        [NUnit.Framework.TestCaseAttribute("DisableNetworkSettingsReset", null)]
        [NUnit.Framework.TestCaseAttribute("DisableOutgoingCalls", null)]
        [NUnit.Framework.TestCaseAttribute("DisableOutgoingNfc", null)]
        [NUnit.Framework.TestCaseAttribute("DisableSdCard", null)]
        [NUnit.Framework.TestCaseAttribute("DisableSms", null)]
        [NUnit.Framework.TestCaseAttribute("DisableStatusBar", null)]
        [NUnit.Framework.TestCaseAttribute("DisableTetheringManagement", null)]
        [NUnit.Framework.TestCaseAttribute("DisableThirdPartyInputMethods", null)]
        [NUnit.Framework.TestCaseAttribute("DisableVpnManagement", null)]
        [NUnit.Framework.TestCaseAttribute("DisableWifiManagement", null)]
        [NUnit.Framework.TestCaseAttribute("RedactNotifications", null)]
        public virtual void CreateAndAssignOneProfileContainingADFCPayloadWithTheSpecifiedRestrictionSetToFalse(string restrictionName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create and assign one profile containing a DFC payload with the specified restric" +
                    "tion set to False", @__tags);
#line 17
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Platform",
                        "Type",
                        "Name"});
            table3.AddRow(new string[] {
                        "AndroidPlus",
                        "AndroidWork",
                        "autogenerate {guid}.ProfileName"});
#line 18
testRunner.Given("I have created a profile with properties:", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "RestrictionName",
                        "RestrictionValue"});
            table4.AddRow(new string[] {
                        "{guid}.ProfileName",
                        string.Format("{0}", restrictionName),
                        "False"});
#line 21
    testRunner.And("I have added a DFC payload configured as follows:", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "TargetDevice",
                        "TargetGroup"});
            table5.AddRow(new string[] {
                        "{guid}.ProfileName",
                        "{guid}.DeviceId",
                        ""});
#line 24
testRunner.When("I assign the profiles as follows:", ((string)(null)), table5, "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "DeviceId",
                        "ProfileStatus"});
            table6.AddRow(new string[] {
                        "{guid}.ProfileName",
                        "{guid}.DeviceId",
                        "Installed"});
#line 27
testRunner.Then("The statuses of the profiles are as follows:", ((string)(null)), table6, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId",
                        "RestrictionName",
                        "RestrictionValue"});
            table7.AddRow(new string[] {
                        "{guid}.DeviceId",
                        string.Format("{0}", restrictionName),
                        "False"});
#line 30
    testRunner.And("The values of the DFC restrictions are as follows:", ((string)(null)), table7, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create and assign one profile containing a DFC payload with the specified restric" +
            "tion set to True")]
        [NUnit.Framework.IgnoreAttribute()]
        [NUnit.Framework.TestCaseAttribute("DisableAppManagement", null)]
        [NUnit.Framework.TestCaseAttribute("DisableBluetoothContactSharing", null)]
        [NUnit.Framework.TestCaseAttribute("DisableBluetoothManagement", null)]
        [NUnit.Framework.TestCaseAttribute("DisableCamera", null)]
        [NUnit.Framework.TestCaseAttribute("DisableCertificateManagement", null)]
        [NUnit.Framework.TestCaseAttribute("DisableFactoryReset", null)]
        [NUnit.Framework.TestCaseAttribute("DisableFingerprintAuthentication", null)]
        [NUnit.Framework.TestCaseAttribute("DisableInstallationFromUnknownSources", null)]
        [NUnit.Framework.TestCaseAttribute("DisableKeyguardCamera", null)]
        [NUnit.Framework.TestCaseAttribute("DisableLocationSharing", null)]
        [NUnit.Framework.TestCaseAttribute("DisableMultiUser", null)]
        [NUnit.Framework.TestCaseAttribute("DisableNetworkSettingsReset", null)]
        [NUnit.Framework.TestCaseAttribute("DisableOutgoingCalls", null)]
        [NUnit.Framework.TestCaseAttribute("DisableOutgoingNfc", null)]
        [NUnit.Framework.TestCaseAttribute("DisableSdCard", null)]
        [NUnit.Framework.TestCaseAttribute("DisableSms", null)]
        [NUnit.Framework.TestCaseAttribute("DisableStatusBar", null)]
        [NUnit.Framework.TestCaseAttribute("DisableTetheringManagement", null)]
        [NUnit.Framework.TestCaseAttribute("DisableThirdPartyInputMethods", null)]
        [NUnit.Framework.TestCaseAttribute("DisableVpnManagement", null)]
        [NUnit.Framework.TestCaseAttribute("DisableWifiManagement", null)]
        [NUnit.Framework.TestCaseAttribute("RedactNotifications", null)]
        public virtual void CreateAndAssignOneProfileContainingADFCPayloadWithTheSpecifiedRestrictionSetToTrue(string restrictionName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create and assign one profile containing a DFC payload with the specified restric" +
                    "tion set to True", @__tags);
#line 60
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Platform",
                        "Type",
                        "Name"});
            table8.AddRow(new string[] {
                        "AndroidPlus",
                        "AndroidWork",
                        "autogenerate {guid}.ProfileName"});
#line 61
testRunner.Given("I have created a profile with properties:", ((string)(null)), table8, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "RestrictionName",
                        "RestrictionValue"});
            table9.AddRow(new string[] {
                        "{guid}.ProfileName",
                        string.Format("{0}", restrictionName),
                        "True"});
#line 64
    testRunner.And("I have added a DFC payload configured as follows:", ((string)(null)), table9, "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "TargetDevice",
                        "TargetGroup"});
            table10.AddRow(new string[] {
                        "{guid}.ProfileName",
                        "{guid}.DeviceId",
                        ""});
#line 67
testRunner.When("I assign the profiles as follows:", ((string)(null)), table10, "When ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "DeviceId",
                        "ProfileStatus"});
            table11.AddRow(new string[] {
                        "{guid}.ProfileName",
                        "{guid}.DeviceId",
                        "Installed"});
#line 70
testRunner.Then("The statuses of the profiles are as follows:", ((string)(null)), table11, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId",
                        "RestrictionName",
                        "RestrictionValue"});
            table12.AddRow(new string[] {
                        "{guid}.DeviceId",
                        string.Format("{0}", restrictionName),
                        "True"});
#line 73
    testRunner.And("The values of the DFC restrictions are as follows:", ((string)(null)), table12, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create and assign two profiles containing conflicting DFC payloads with the speci" +
            "fied restrictions set to False and True")]
        [NUnit.Framework.IgnoreAttribute()]
        [NUnit.Framework.TestCaseAttribute("DisableAppManagement", null)]
        [NUnit.Framework.TestCaseAttribute("DisableBluetoothContactSharing", null)]
        [NUnit.Framework.TestCaseAttribute("DisableBluetoothManagement", null)]
        [NUnit.Framework.TestCaseAttribute("DisableCamera", null)]
        [NUnit.Framework.TestCaseAttribute("DisableCertificateManagement", null)]
        [NUnit.Framework.TestCaseAttribute("DisableFactoryReset", null)]
        [NUnit.Framework.TestCaseAttribute("DisableFingerprintAuthentication", null)]
        [NUnit.Framework.TestCaseAttribute("DisableInstallationFromUnknownSources", null)]
        [NUnit.Framework.TestCaseAttribute("DisableKeyguardCamera", null)]
        [NUnit.Framework.TestCaseAttribute("DisableLocationSharing", null)]
        [NUnit.Framework.TestCaseAttribute("DisableMultiUser", null)]
        [NUnit.Framework.TestCaseAttribute("DisableNetworkSettingsReset", null)]
        [NUnit.Framework.TestCaseAttribute("DisableOutgoingCalls", null)]
        [NUnit.Framework.TestCaseAttribute("DisableOutgoingNfc", null)]
        [NUnit.Framework.TestCaseAttribute("DisableSdCard", null)]
        [NUnit.Framework.TestCaseAttribute("DisableSms", null)]
        [NUnit.Framework.TestCaseAttribute("DisableStatusBar", null)]
        [NUnit.Framework.TestCaseAttribute("DisableTetheringManagement", null)]
        [NUnit.Framework.TestCaseAttribute("DisableThirdPartyInputMethods", null)]
        [NUnit.Framework.TestCaseAttribute("DisableVpnManagement", null)]
        [NUnit.Framework.TestCaseAttribute("DisableWifiManagement", null)]
        [NUnit.Framework.TestCaseAttribute("RedactNotifications", null)]
        public virtual void CreateAndAssignTwoProfilesContainingConflictingDFCPayloadsWithTheSpecifiedRestrictionsSetToFalseAndTrue(string restrictionName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create and assign two profiles containing conflicting DFC payloads with the speci" +
                    "fied restrictions set to False and True", @__tags);
#line 103
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Platform",
                        "Type",
                        "Name"});
            table13.AddRow(new string[] {
                        "AndroidPlus",
                        "AndroidWork",
                        "autogenerate {guid}.ProfileName1"});
#line 104
testRunner.Given("I have created a profile with properties:", ((string)(null)), table13, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "RestrictionName",
                        "RestrictionValue"});
            table14.AddRow(new string[] {
                        "{guid}.ProfileName1",
                        string.Format("{0}", restrictionName),
                        "False"});
#line 107
    testRunner.And("I have added a DFC payload configured as follows:", ((string)(null)), table14, "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Platform",
                        "Type",
                        "Name"});
            table15.AddRow(new string[] {
                        "AndroidPlus",
                        "AndroidWork",
                        "autogenerate {guid}.ProfileName2"});
#line 111
    testRunner.And("I have created a profile with properties:", ((string)(null)), table15, "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "RestrictionName",
                        "RestrictionValue"});
            table16.AddRow(new string[] {
                        "{guid}.ProfileName2",
                        string.Format("{0}", restrictionName),
                        "True"});
#line 114
    testRunner.And("I have added a DFC payload configured as follows:", ((string)(null)), table16, "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "TargetDevice",
                        "TargetGroup"});
            table17.AddRow(new string[] {
                        "{guid}.ProfileName1",
                        "{guid}.DeviceId",
                        ""});
            table17.AddRow(new string[] {
                        "{guid}.ProfileName2",
                        "{guid}.DeviceId",
                        ""});
#line 117
testRunner.When("I assign the profiles as follows:", ((string)(null)), table17, "When ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProfileName",
                        "DeviceId",
                        "ProfileStatus"});
            table18.AddRow(new string[] {
                        "{guid}.ProfileName1",
                        "{guid}.DeviceId",
                        "Installed"});
            table18.AddRow(new string[] {
                        "{guid}.ProfileName2",
                        "{guid}.DeviceId",
                        "Installed"});
#line 121
testRunner.Then("The statuses of the profiles are as follows:", ((string)(null)), table18, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId",
                        "RestrictionName",
                        "RestrictionValue"});
            table19.AddRow(new string[] {
                        "{guid}.DeviceId",
                        string.Format("{0}", restrictionName),
                        "True"});
#line 125
    testRunner.And("The values of the DFC restrictions are as follows:", ((string)(null)), table19, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
