// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Soti.MobiControl.Bdd.PublicApiTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Device Configuration Management")]
    public partial class DeviceConfigurationManagementFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DeviceConfigurationManagement.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Device Configuration Management", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
 testRunner.Given("I am a system administrator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding configuration to a device group")]
        public virtual void AddingConfigurationToADeviceGroup()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding configuration to a device group", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table1.AddRow(new string[] {
                        "autogenerate device.group.name.{guid}"});
#line 7
  testRunner.When("I call Public API function DeviceGroup/Add using request with properties as follo" +
                    "ws:", ((string)(null)), table1, "When ");
#line 10
  testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 11
  testRunner.When("I make a call to Public API GroupService/GetAll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "DateTime",
                        "Period"});
            table2.AddRow(new string[] {
                        "2016/01/01 10:00:00",
                        "02:00:00"});
#line 12
   testRunner.And("I call Public API to apply iOS Update Schedule configuration to device group \'\\\\d" +
                    "evice.group.name.{guid}\' with request properties as follows:", ((string)(null)), table2, "And ");
#line 15
  testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 16
  testRunner.When("I call Public API to get iOS Update Schedule configuration applied to device grou" +
                    "p \'\\\\device.group.name.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
  testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "DateTime",
                        "Period"});
            table3.AddRow(new string[] {
                        "2016/01/01 10:00:00",
                        "02:00:00"});
#line 18
   testRunner.And("iOS Update Schedule configuration has properties as follows:", ((string)(null)), table3, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding configuration to a device")]
        public virtual void AddingConfigurationToADevice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding configuration to a device", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceName",
                        "RuleName",
                        "LdapConnection",
                        "LdapUserName",
                        "LdapUserPassword",
                        "DeviceId"});
            table4.AddRow(new string[] {
                        "autogenerate device.name.{guid}",
                        "{iosrule_soti.net}",
                        "{soti.net}",
                        "testuser2",
                        "Bonjour321",
                        "autogenerate device.id.{guid}"});
#line 23
 testRunner.Given("I enrolled Ios Device with properties as follows:", ((string)(null)), table4, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "DateTime",
                        "Period"});
            table5.AddRow(new string[] {
                        "2016/01/01 10:00:00",
                        "02:00:00"});
#line 26
  testRunner.When("I call Public API to apply iOS Update Schedule configuration to device with id \'d" +
                    "evice.id.{guid}\' with request properties as follows:", ((string)(null)), table5, "When ");
#line 29
  testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 30
  testRunner.When("I call Public API to get iOS Update Schedule configuration applied to device with" +
                    " id \'device.id.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
  testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "DateTime",
                        "Period"});
            table6.AddRow(new string[] {
                        "2016/01/01 10:00:00",
                        "02:00:00"});
#line 32
   testRunner.And("iOS Update Schedule configuration has properties as follows:", ((string)(null)), table6, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Modifying device group configuration")]
        public virtual void ModifyingDeviceGroupConfiguration()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Modifying device group configuration", ((string[])(null)));
#line 36
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table7.AddRow(new string[] {
                        "autogenerate device.group.name.{guid}"});
#line 37
  testRunner.When("I call Public API function DeviceGroup/Add using request with properties as follo" +
                    "ws:", ((string)(null)), table7, "When ");
#line 40
  testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 41
  testRunner.When("I make a call to Public API GroupService/GetAll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "DateTime",
                        "Period"});
            table8.AddRow(new string[] {
                        "2016/01/01 10:00:00",
                        "02:00:00"});
#line 42
   testRunner.And("I call Public API to apply iOS Update Schedule configuration to device group \'\\\\d" +
                    "evice.group.name.{guid}\' with request properties as follows:", ((string)(null)), table8, "And ");
#line 45
  testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "DateTime",
                        "Period"});
            table9.AddRow(new string[] {
                        "2016/01/01 12:00:00",
                        "01:00:00"});
#line 46
  testRunner.When("I call Public API to apply iOS Update Schedule configuration to device group \'\\\\d" +
                    "evice.group.name.{guid}\' with request properties as follows:", ((string)(null)), table9, "When ");
#line 49
  testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 50
  testRunner.When("I call Public API to get iOS Update Schedule configuration applied to device grou" +
                    "p \'\\\\device.group.name.{guid}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 51
  testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "DateTime",
                        "Period"});
            table10.AddRow(new string[] {
                        "2016/01/01 12:00:00",
                        "01:00:00"});
#line 52
   testRunner.And("iOS Update Schedule configuration has properties as follows:", ((string)(null)), table10, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Deleting device group configuration")]
        public virtual void DeletingDeviceGroupConfiguration()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deleting device group configuration", ((string[])(null)));
#line 56
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table11.AddRow(new string[] {
                        "autogenerate device.group.parent.{guid}"});
#line 57
 testRunner.Given("I call Public API function DeviceGroup/Add using request with properties as follo" +
                    "ws:", ((string)(null)), table11, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "GroupPath"});
            table12.AddRow(new string[] {
                        "\\device.group.parent.{guid}\\child"});
#line 60
   testRunner.And("I have added device groups as follows:", ((string)(null)), table12, "And ");
#line 63
  testRunner.When("I make a call to Public API GroupService/GetAll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "DateTime",
                        "Period"});
            table13.AddRow(new string[] {
                        "2016/01/01 10:00:00",
                        "02:00:00"});
#line 64
   testRunner.And("I call Public API to apply iOS Update Schedule configuration to device group \'\\\\d" +
                    "evice.group.parent.{guid}\' with request properties as follows:", ((string)(null)), table13, "And ");
#line 67
  testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 68
  testRunner.When("I call Public API to get iOS Update Schedule configuration applied to device grou" +
                    "p \'\\\\device.group.parent.{guid}\\child\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 69
  testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "DateTime",
                        "Period"});
            table14.AddRow(new string[] {
                        "2016/01/01 10:00:00",
                        "02:00:00"});
#line 70
   testRunner.And("iOS Update Schedule configuration has properties as follows:", ((string)(null)), table14, "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "DateTime",
                        "Period"});
            table15.AddRow(new string[] {
                        "2016/01/01 12:00:00",
                        "01:00:00"});
#line 73
  testRunner.When("I call Public API to apply iOS Update Schedule configuration to device group \'\\\\d" +
                    "evice.group.parent.{guid}\\child\' with request properties as follows:", ((string)(null)), table15, "When ");
#line 76
  testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 77
  testRunner.When("I call Public API to get iOS Update Schedule configuration applied to device grou" +
                    "p \'\\\\device.group.parent.{guid}\\child\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 78
  testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "DateTime",
                        "Period"});
            table16.AddRow(new string[] {
                        "2016/01/01 12:00:00",
                        "01:00:00"});
#line 79
   testRunner.And("iOS Update Schedule configuration has properties as follows:", ((string)(null)), table16, "And ");
#line 82
  testRunner.When("I call Public API to delete iOS Update Schedule configuration applied to device g" +
                    "roup \'\\\\device.group.parent.{guid}\\child\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 83
  testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 84
  testRunner.When("I call Public API to get iOS Update Schedule configuration applied to device grou" +
                    "p \'\\\\device.group.parent.{guid}\\child\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 85
  testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "DateTime",
                        "Period"});
            table17.AddRow(new string[] {
                        "2016/01/01 10:00:00",
                        "02:00:00"});
#line 86
   testRunner.And("iOS Update Schedule configuration has properties as follows:", ((string)(null)), table17, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
