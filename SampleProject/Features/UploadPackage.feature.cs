// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Soti.MobiControl.Bdd.PublicApiTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Uploading package")]
    public partial class UploadingPackageFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "UploadPackage.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Uploading package", "  Uploading package via public API", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line 5
 testRunner.Given("I am a system administrator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Upload package with basic information")]
        [NUnit.Framework.CategoryAttribute("package")]
        [NUnit.Framework.TestCaseAttribute("Android", "AndroidPlus", null)]
        [NUnit.Framework.TestCaseAttribute("WindowsCE", "WindowsCE", null)]
        [NUnit.Framework.TestCaseAttribute("AllWindowsMobile", "WindowsCE", null)]
        [NUnit.Framework.TestCaseAttribute("WindowsMobile", "WindowsCE", null)]
        [NUnit.Framework.TestCaseAttribute("WindowsMobileSmartPhone", "WindowsCE", null)]
        [NUnit.Framework.TestCaseAttribute("WindowsDesktop", "WindowsDesktop", null)]
        [NUnit.Framework.TestCaseAttribute("Printer", "Printer", null)]
        public virtual void UploadPackageWithBasicInformation(string packagePlatform, string deviceFamily, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "package"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Upload package with basic information", @__tags);
#line 8
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "PackagePlatform",
                        "packname"});
            table1.AddRow(new string[] {
                        string.Format("{0}", packagePlatform),
                        "autogenerate {guid}"});
#line 9
 testRunner.When("I upload a package file from \'\\\\storage\\\\qaShare\\\\BDD_IntegrationTests_Data\\\\Andr" +
                    "oidPlusPackage.pcg\' with properties as follows:", ((string)(null)), table1, "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceFamily",
                        "ReferenceId"});
            table2.AddRow(new string[] {
                        string.Format("{0}", deviceFamily),
                        "autogenerate {guid}"});
#line 12
    testRunner.And("I add a new package version via public API using the file uploaded with propertie" +
                    "s as follows:", ((string)(null)), table2, "And ");
#line 15
 testRunner.Then("The package summary returned via public API with the properties as specified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Upload package with device family mismatch")]
        [NUnit.Framework.CategoryAttribute("package")]
        [NUnit.Framework.TestCaseAttribute("Printer", "AndroidPlus", null)]
        [NUnit.Framework.TestCaseAttribute("Android", "WindowsCE", null)]
        [NUnit.Framework.TestCaseAttribute("WindowsCE", "WindowsDesktop", null)]
        [NUnit.Framework.TestCaseAttribute("WindowsDesktop", "Printer", null)]
        public virtual void UploadPackageWithDeviceFamilyMismatch(string packagePlatform, string deviceFamily, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "package"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Upload package with device family mismatch", @__tags);
#line 28
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "PackagePlatform",
                        "packname"});
            table3.AddRow(new string[] {
                        string.Format("{0}", packagePlatform),
                        "autogenerate {guid}"});
#line 29
 testRunner.When("I upload a package file from \'\\\\storage\\\\qaShare\\\\BDD_IntegrationTests_Data\\\\Andr" +
                    "oidPlusPackage.pcg\' with properties as follows:", ((string)(null)), table3, "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceFamily",
                        "ReferenceId"});
            table4.AddRow(new string[] {
                        string.Format("{0}", deviceFamily),
                        "autogenerate {guid}"});
#line 32
    testRunner.And("I add a new package version via public API using the file uploaded with propertie" +
                    "s as follows:", ((string)(null)), table4, "And ");
#line 35
 testRunner.Then("Public API returns error # \'1601\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Upload package with invalid Device Family values")]
        [NUnit.Framework.CategoryAttribute("package")]
        [NUnit.Framework.TestCaseAttribute("All", null)]
        [NUnit.Framework.TestCaseAttribute("NotSpecified", null)]
        public virtual void UploadPackageWithInvalidDeviceFamilyValues(string deviceFamily, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "package"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Upload package with invalid Device Family values", @__tags);
#line 45
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceFamily",
                        "packname"});
            table5.AddRow(new string[] {
                        "Android",
                        "autogenerate {guid}"});
            table5.AddRow(new string[] {
                        "Printer",
                        "autogenerate {guid}"});
            table5.AddRow(new string[] {
                        "WindowsCE",
                        "autogenerate {guid}"});
            table5.AddRow(new string[] {
                        "WindowsDesktop",
                        "autogenerate {guid}"});
#line 46
 testRunner.When("I upload a package file from \'\\\\storage\\\\qaShare\\\\BDD_IntegrationTests_Data\\\\Andr" +
                    "oidPlusPackage.pcg\' with properties as follows:", ((string)(null)), table5, "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceFamily",
                        "ReferenceId"});
            table6.AddRow(new string[] {
                        string.Format("{0}", deviceFamily),
                        "autogenerate {guid}"});
#line 52
    testRunner.And("I add a new package version via public API using the file uploaded with propertie" +
                    "s as follows:", ((string)(null)), table6, "And ");
#line 55
 testRunner.Then("Public API returns error # \'2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Upload the package with a same Name and Version twice")]
        [NUnit.Framework.CategoryAttribute("package")]
        [NUnit.Framework.TestCaseAttribute("Printer", "Printer", null)]
        [NUnit.Framework.TestCaseAttribute("Android", "Android", null)]
        [NUnit.Framework.TestCaseAttribute("WindowsCE", "WindowsCE", null)]
        [NUnit.Framework.TestCaseAttribute("WindowsDesktop", "WindowsDesktop", null)]
        public virtual void UploadThePackageWithASameNameAndVersionTwice(string packagePlatform, string deviceFamily, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "package"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Upload the package with a same Name and Version twice", @__tags);
#line 63
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "PackagePlatform",
                        "packname"});
            table7.AddRow(new string[] {
                        string.Format("{0}", packagePlatform),
                        "autogenerate {guid}"});
#line 64
    testRunner.When("I upload a package file from \'\\\\storage\\\\qaShare\\\\BDD_IntegrationTests_Data\\\\Andr" +
                    "oidPlusPackage.pcg\' with properties as follows:", ((string)(null)), table7, "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceFamily",
                        "ReferenceId"});
            table8.AddRow(new string[] {
                        string.Format("{0}", deviceFamily),
                        "autogenerate {guid}"});
#line 67
    testRunner.And("I add a new package version via public API using the file uploaded with propertie" +
                    "s as follows:", ((string)(null)), table8, "And ");
#line 70
    testRunner.And("I add the same package version via public API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
    testRunner.Then("Public API returns error # \'1600\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Upload different versions of a package")]
        [NUnit.Framework.CategoryAttribute("package")]
        [NUnit.Framework.TestCaseAttribute("Printer", "Printer", null)]
        [NUnit.Framework.TestCaseAttribute("Android", "Android", null)]
        [NUnit.Framework.TestCaseAttribute("WindowsCE", "WindowsCE", null)]
        [NUnit.Framework.TestCaseAttribute("WindowsDesktop", "WindowsDesktop", null)]
        public virtual void UploadDifferentVersionsOfAPackage(string packagePlatform, string deviceFamily, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "package"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Upload different versions of a package", @__tags);
#line 82
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "PackagePlatform",
                        "packname",
                        "BuildVersion",
                        "Version"});
            table9.AddRow(new string[] {
                        string.Format("{0}", packagePlatform),
                        "autogenerate Package{guid}",
                        "1",
                        "1.0"});
#line 83
    testRunner.When("I upload a package file from \'\\\\storage\\\\qaShare\\\\BDD_IntegrationTests_Data\\\\Andr" +
                    "oidPlusPackage.pcg\' with properties as follows:", ((string)(null)), table9, "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceFamily",
                        "ReferenceId"});
            table10.AddRow(new string[] {
                        string.Format("{0}", deviceFamily),
                        "autogenerate {guid}"});
#line 86
    testRunner.And("I add a new package version via public API using the file uploaded with propertie" +
                    "s as follows:", ((string)(null)), table10, "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "PackagePlatform",
                        "packname",
                        "BuildVersion",
                        "Version"});
            table11.AddRow(new string[] {
                        string.Format("{0}", packagePlatform),
                        "Package{guid}",
                        "2",
                        "2.0"});
#line 89
    testRunner.When("I upload a package file from \'\\\\storage\\\\qaShare\\\\BDD_IntegrationTests_Data\\\\Andr" +
                    "oidPlusPackage.pcg\' with properties as follows:", ((string)(null)), table11, "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceFamily"});
            table12.AddRow(new string[] {
                        string.Format("{0}", deviceFamily)});
#line 92
    testRunner.And("I add a new package version via public API using the file uploaded with propertie" +
                    "s as follows:", ((string)(null)), table12, "And ");
#line 96
 testRunner.Then("The package summary returned via public API with the properties as specified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Upload package with invalid format")]
        [NUnit.Framework.CategoryAttribute("package")]
        [NUnit.Framework.TestCaseAttribute("AndroidPlus", null)]
        [NUnit.Framework.TestCaseAttribute("WindowsCE", null)]
        [NUnit.Framework.TestCaseAttribute("WindowsDesktop", null)]
        [NUnit.Framework.TestCaseAttribute("Printer", null)]
        public virtual void UploadPackageWithInvalidFormat(string deviceFamily, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "package"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Upload package with invalid format", @__tags);
#line 106
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 107
 testRunner.When("I upload file from \'\\\\storage\\\\qaShare\\\\BDD_IntegrationTests_Data\\\\InvalidPackage" +
                    ".pcg\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceFamily",
                        "ReferenceId"});
            table13.AddRow(new string[] {
                        string.Format("{0}", deviceFamily),
                        "autogenerate {guid}"});
#line 108
    testRunner.And("I add a new package version via public API using the file uploaded with propertie" +
                    "s as follows:", ((string)(null)), table13, "And ");
#line 111
 testRunner.Then("Public API returns error # \'1603\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
