// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Soti.MobiControl.Bdd.PublicApiTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Device Note management")]
    public partial class DeviceNoteManagementFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DeviceNote.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Device Note management", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
testRunner.Given("I am a system administrator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add Note to a Device")]
        public virtual void AddNoteToADevice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add Note to a Device", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceName",
                        "RuleName",
                        "LdapConnection",
                        "LdapUserName",
                        "LdapUserPassword",
                        "DeviceId"});
            table1.AddRow(new string[] {
                        "autogenerate device.name.{guid}",
                        "{iosrule_soti.net}",
                        "{soti.net}",
                        "testuser2",
                        "Bonjour321",
                        "autogenerate device.id.{guid}"});
#line 7
 testRunner.Given("I enrolled Ios Device with properties as follows:", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId",
                        "Icon",
                        "Subject",
                        "Description"});
            table2.AddRow(new string[] {
                        "device.id.{guid}",
                        "Red",
                        "Issue",
                        "Device issue description"});
#line 10
  testRunner.When("I make a call to public API to add device note with request properties as follows" +
                    ":", ((string)(null)), table2, "When ");
#line 13
  testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 14
  testRunner.When("I make a call to retrieve last added device note", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Icon",
                        "Subject",
                        "Description"});
            table3.AddRow(new string[] {
                        "Red",
                        "Issue",
                        "Device issue description"});
#line 15
  testRunner.Then("Last retrieved device note has properties as follows:", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add Note to a Device Group")]
        public virtual void AddNoteToADeviceGroup()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add Note to a Device Group", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table4.AddRow(new string[] {
                        "autogenerate device.group.name.{guid}"});
#line 20
  testRunner.When("I call Public API function DeviceGroup/Add using request with properties as follo" +
                    "ws:", ((string)(null)), table4, "When ");
#line 23
  testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Icon",
                        "Subject",
                        "Description"});
            table5.AddRow(new string[] {
                        "Red",
                        "Issue",
                        "Device issue description"});
#line 24
  testRunner.When("I make a call to public API to add device group note to the last added device gro" +
                    "up with request properties as follows:", ((string)(null)), table5, "When ");
#line 27
  testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 28
  testRunner.When("I make a call to retrieve last added device note", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Icon",
                        "Subject",
                        "Description"});
            table6.AddRow(new string[] {
                        "Red",
                        "Issue",
                        "Device issue description"});
#line 29
  testRunner.Then("Last retrieved device note has properties as follows:", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Edit Device Note")]
        public virtual void EditDeviceNote()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Edit Device Note", ((string[])(null)));
#line 33
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceName",
                        "RuleName",
                        "LdapConnection",
                        "LdapUserName",
                        "LdapUserPassword",
                        "DeviceId"});
            table7.AddRow(new string[] {
                        "autogenerate device.name.{guid}",
                        "{iosrule_soti.net}",
                        "{soti.net}",
                        "testuser2",
                        "Bonjour321",
                        "autogenerate device.id.{guid}"});
#line 34
 testRunner.Given("I enrolled Ios Device with properties as follows:", ((string)(null)), table7, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId",
                        "Icon",
                        "Subject",
                        "Description"});
            table8.AddRow(new string[] {
                        "device.id.{guid}",
                        "Red",
                        "Issue",
                        "Device issue description"});
#line 37
 testRunner.Given("I have created device note with properties as follows:", ((string)(null)), table8, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Icon",
                        "Subject",
                        "Description"});
            table9.AddRow(new string[] {
                        "Green",
                        "Note",
                        "Device note description"});
#line 40
  testRunner.When("I make a call to public API to edit last added device note with request propertie" +
                    "s as follows:", ((string)(null)), table9, "When ");
#line 43
  testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 44
  testRunner.When("I make a call to retrieve last added device note", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Icon",
                        "Subject",
                        "Description"});
            table10.AddRow(new string[] {
                        "Green",
                        "Note",
                        "Device note description"});
#line 45
  testRunner.Then("Last retrieved device note has properties as follows:", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete Device Note")]
        public virtual void DeleteDeviceNote()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete Device Note", ((string[])(null)));
#line 49
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceName",
                        "RuleName",
                        "LdapConnection",
                        "LdapUserName",
                        "LdapUserPassword",
                        "DeviceId"});
            table11.AddRow(new string[] {
                        "autogenerate device.name.{guid}",
                        "{iosrule_soti.net}",
                        "{soti.net}",
                        "testuser2",
                        "Bonjour321",
                        "autogenerate device.id.{guid}"});
#line 50
 testRunner.Given("I enrolled Ios Device with properties as follows:", ((string)(null)), table11, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceId",
                        "Icon",
                        "Subject",
                        "Description"});
            table12.AddRow(new string[] {
                        "device.id.{guid}",
                        "Red",
                        "Issue",
                        "Device issue description"});
#line 53
 testRunner.Given("I have created device note with properties as follows:", ((string)(null)), table12, "Given ");
#line 56
  testRunner.When("I make a call to public API to delete last added device note", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 57
  testRunner.Then("Public API response is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 58
  testRunner.When("I make a call to retrieve last added device note", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 59
  testRunner.Then("Public API response is \'httpCode:404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
