// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Soti.MobiControl.Bdd.PublicApiTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AddDeviceRule creation")]
    public partial class AddDeviceRuleCreationFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CreateRule.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "AddDeviceRule creation", "In order to enroll a device\r\nAs an administrator\r\nI want to create an AddDeviceRu" +
                    "le", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create iOS AddDeviceRule")]
        public virtual void CreateIOSAddDeviceRule()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create iOS AddDeviceRule", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
    testRunner.And("I uploaded an APNS certificate from \'file:\\\\storage\\\\qaShare\\\\BDD_IntegrationTest" +
                    "s_Data\\\\iOS_Certificate.pfx \' with password \'123456\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Server",
                        "UserName",
                        "Password",
                        "Base DN"});
            table1.AddRow(new string[] {
                        "autogenerate {guid}.LdapConnection",
                        "corp.soti.net",
                        "testuser2",
                        "Bonjour321",
                        "DC=corp,DC=soti,DC=net"});
#line 9
    testRunner.And("I have configured LDAP connection as follows:", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "DeviceFamily",
                        "TargetGroups",
                        "LdapConnection",
                        "Priority"});
            table2.AddRow(new string[] {
                        "autogenerate {guid}.RuleName",
                        "Ios",
                        "\\\\My Company",
                        "{guid}.LdapConnection",
                        "Normal"});
#line 12
testRunner.When("I make a call to public API to create a rule with request properties as follows:", ((string)(null)), table2, "When ");
#line 15
testRunner.Then("The rule is created with properties as specified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create Android Plus AddDeviceRule with SkipSkipCreateGoogleAccount property set")]
        public virtual void CreateAndroidPlusAddDeviceRuleWithSkipSkipCreateGoogleAccountPropertySet()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create Android Plus AddDeviceRule with SkipSkipCreateGoogleAccount property set", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line 19
testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "DeviceFamily",
                        "TargetGroups",
                        "LdapConnection",
                        "Priority",
                        "SkipCreateGoogleAccount"});
            table3.AddRow(new string[] {
                        "autogenerate {guid}.RuleName",
                        "AndroidPlus",
                        "\\\\My Company",
                        "{null}",
                        "Normal",
                        "true"});
#line 20
    testRunner.And("I created an AfW rule as follows:", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceIdentity.Id",
                        "DeviceIdentity.DevicePropertyIdType",
                        "Message"});
            table4.AddRow(new string[] {
                        "autogenerate {guid}.DeviceId",
                        "0",
                        "Message"});
#line 24
testRunner.When("I call Public API function SendMessage using request with properties as follows:", ((string)(null)), table4, "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "SkipCreateGoogleAccount",
                        "DeviceIdentity.DevicePropertyIdType",
                        "Message"});
            table5.AddRow(new string[] {
                        "true",
                        "0",
                        "Message"});
#line 27
testRunner.Then("Device receives ConfigMessage with following context:", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create Android Plus AddDeviceRule with SkipSkipCreateGoogleAccount property clear" +
            "")]
        public virtual void CreateAndroidPlusAddDeviceRuleWithSkipSkipCreateGoogleAccountPropertyClear()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create Android Plus AddDeviceRule with SkipSkipCreateGoogleAccount property clear" +
                    "", ((string[])(null)));
#line 32
this.ScenarioSetup(scenarioInfo);
#line 33
testRunner.Given("I am a user with name \'Administrator\' and password \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "DeviceFamily",
                        "TargetGroups",
                        "LdapConnection",
                        "Priority",
                        "SkipCreateGoogleAccount"});
            table6.AddRow(new string[] {
                        "autogenerate {guid}.RuleName",
                        "AndroidPlus",
                        "\\\\My Company",
                        "{null}",
                        "Normal",
                        "false"});
#line 34
    testRunner.And("I created an AfW rule as follows:", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceIdentity.Id",
                        "DeviceIdentity.DevicePropertyIdType",
                        "Message"});
            table7.AddRow(new string[] {
                        "autogenerate {guid}.DeviceId",
                        "0",
                        "Message"});
#line 38
testRunner.When("I call Public API function SendMessage using request with properties as follows:", ((string)(null)), table7, "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "SkipCreateGoogleAccount",
                        "DeviceIdentity.DevicePropertyIdType",
                        "Message"});
            table8.AddRow(new string[] {
                        "false",
                        "0",
                        "Message"});
#line 41
testRunner.Then("Device receives ConfigMessage with following context:", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
